import { Metadata } from "next";
import { DocsLayout } from "@/components/layout/DocsLayout";
import { TableOfContents } from "@/components/TableOfContents";
import Image from "next/image";
import { api } from "@/trpc/server";
import { localizeNumber } from "@/lib/utils/localize-number";
import FarmersGroupCharts from "./_components/farmers-group-charts";
import FarmersGroupAnalysisSection from "./_components/farmers-group-analysis-section";
import FarmersGroupSEO from "./_components/farmers-group-seo";
import WardBasedFarmsList from "./_components/ward-based-farms-list";
import { businessTypeOptions } from "@/server/api/routers/profile/economics/municipality-wide-commercial-agricultural-animal-husbandry-farmers-group.schema";

// Force dynamic rendering since we're using tRPC which relies on headers
export const dynamic = "force-dynamic";

// Define the locales for which this page should be statically generated
export async function generateStaticParams() {
  return [{ locale: "en" }];
}

// Optional: Add revalidation period
export const revalidate = 86400; // Revalidate once per day

// Define English names for business types (for SEO)
const BUSINESS_TYPES_EN: Record<string, string> = {
  VEGETABLE_FARMING: "Vegetable Farming",
  GOAT_FARMING: "Goat Farming",
  POULTRY_FARMING: "Poultry Farming",
  FISH_FARMING: "Fish Farming",
  CATTLE_FARMING: "Cattle Farming",
  ANIMAL_HUSBANDRY: "Animal Husbandry",
  LIVESTOCK_POULTRY: "Livestock and Poultry",
  BEEKEEPING: "Beekeeping",
  FRUIT_FARMING: "Fruit Farming",
  MUSHROOM_FARMING: "Mushroom Farming",
  PIG_FARMING: "Pig Farming",
  NURSERY: "Plant Nursery",
  DAIRY_FARMING: "Dairy Farming",
  MIXED_FARMING: "Mixed Farming",
  AGRICULTURE: "Agriculture",
  ORGANIC_FARMING: "Organic Farming",
  OTHER: "Other Agricultural Activities",
};

// Define Nepali names for business types
const BUSINESS_TYPES: Record<string, string> = businessTypeOptions.reduce(
  (acc, option) => ({
    ...acc,
    [option.value]: option.label,
  }),
  {},
);

// Define colors for business types
const BUSINESS_COLORS: Record<string, string> = {
  VEGETABLE_FARMING: "#27ae60", // Green for vegetable farming
  GOAT_FARMING: "#9b59b6", // Purple for goat farming
  POULTRY_FARMING: "#e74c3c", // Red for poultry farming
  FISH_FARMING: "#3498db", // Blue for fish farming
  CATTLE_FARMING: "#f1c40f", // Yellow for cattle farming
  ANIMAL_HUSBANDRY: "#d35400", // Orange for animal husbandry
  LIVESTOCK_POULTRY: "#c0392b", // Dark red for livestock poultry
  BEEKEEPING: "#f39c12", // Amber for beekeeping
  FRUIT_FARMING: "#16a085", // Teal for fruit farming
  MUSHROOM_FARMING: "#7f8c8d", // Gray for mushroom farming
  PIG_FARMING: "#8e44ad", // Deep purple for pig farming
  NURSERY: "#1abc9c", // Turquoise for nursery
  DAIRY_FARMING: "#2980b9", // Dark blue for dairy farming
  MIXED_FARMING: "#2c3e50", // Slate for mixed farming
  AGRICULTURE: "#27ae60", // Green for agriculture
  ORGANIC_FARMING: "#16a085", // Teal for organic farming
  OTHER: "#95a5a6", // Light gray for other
};

// Icon types for business types
const BUSINESS_ICONS: Record<string, string> = {
  VEGETABLE_FARMING: "ЁЯем",
  GOAT_FARMING: "ЁЯРР",
  POULTRY_FARMING: "ЁЯРУ",
  FISH_FARMING: "ЁЯРЯ",
  CATTLE_FARMING: "ЁЯРД",
  ANIMAL_HUSBANDRY: "ЁЯРС",
  LIVESTOCK_POULTRY: "ЁЯРг",
  BEEKEEPING: "ЁЯРЭ",
  FRUIT_FARMING: "ЁЯНО",
  MUSHROOM_FARMING: "ЁЯНД",
  PIG_FARMING: "ЁЯРЦ",
  NURSERY: "ЁЯМ▒",
  DAIRY_FARMING: "ЁЯеЫ",
  MIXED_FARMING: "ЁЯМ╛",
  AGRICULTURE: "ЁЯЪЬ",
  ORGANIC_FARMING: "ЁЯМ┐",
  OTHER: "ЁЯзСтАНЁЯМ╛",
};

// This function will generate metadata dynamically based on the actual data
export async function generateMetadata(): Promise<Metadata> {
  try {
    // Fetch data for SEO using tRPC
    const farmersGroupData =
      await api.profile.economics.municipalityWideCommercialAgriculturalAnimalHusbandryFarmersGroup.getAll.query();
    const municipalityName = "рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛"; // Pokhara Metropolitan City

    // Process data for SEO
    const totalGroups = farmersGroupData.length;
    const businessTypeCount = farmersGroupData.reduce(
      (acc: Record<string, number>, item: { type: string }) => {
        acc[item.type] = (acc[item.type] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    );

    // Find most common business type
    let mostCommonBusinessType = "";
    let mostCommonCount = 0;
    Object.entries(businessTypeCount).forEach(([type, count]) => {
      const countValue = count as number;
      if (countValue > mostCommonCount) {
        mostCommonCount = countValue;
        mostCommonBusinessType = type;
      }
    });

    const mostCommonBusinessTypePercentage =
      (mostCommonCount / totalGroups) * 100;

    // Calculate ward distribution
    const wardDistribution = farmersGroupData.reduce(
      (acc: Record<number, number>, item: { wardNumber: number }) => {
        acc[item.wardNumber] = (acc[item.wardNumber] || 0) + 1;
        return acc;
      },
      {},
    );

    // Find ward with most groups
    let wardWithMostGroups = 0;
    let wardMaxCount = 0;
    Object.entries(wardDistribution).forEach(([ward, count]) => {
      if (Number(count) > wardMaxCount) {
        wardMaxCount = Number(count);
        wardWithMostGroups = Number(ward);
      }
    });

    // Create rich keywords with actual data
    const keywordsNP = [
      "рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛ рдХреГрд╖рд┐ рд╕рдореВрд╣",
      "рдкреЛрдЦрд░рд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдкрд╢реБрдкрд╛рд▓рди",
      "рдкрд╛рд▓рд┐рдХрд╛ рд╕реНрддрд░реАрдп рдХреГрд╖рд┐ рд╕рдореВрд╣",
      "рдкреЛрдЦрд░рд╛ рдХреГрд╖рд┐ рд╡реНрдпрд╡рд╕рд╛рдп",
      `рдкреЛрдЦрд░рд╛ ${BUSINESS_TYPES[mostCommonBusinessType] || "рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐"}`,
      `рд╡рдбрд╛ ${localizeNumber(wardWithMostGroups.toString(), "ne")} рдХреГрд╖рд┐ рд╕рдореВрд╣`,
      `рдкреЛрдЦрд░рд╛ ${localizeNumber(totalGroups.toString(), "ne")} рдХреГрд╖рд┐ рд╕рдореВрд╣`,
      "рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣",
    ];

    const keywordsEN = [
      "Pokhara Metropolitan City farmers groups",
      "Pokhara commercial agriculture",
      "Municipality-wide agricultural groups",
      "Commercial animal husbandry in Pokhara",
      `${BUSINESS_TYPES_EN[mostCommonBusinessType] || "Commercial agriculture"} in Pokhara`,
      `Ward ${wardWithMostGroups} farming groups`,
      `Pokhara ${totalGroups} agricultural groups`,
      "Commercial animal husbandry groups",
    ];

    // Create detailed description with actual data
    const descriptionNP = `рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд ${localizeNumber(totalGroups.toString(), "ne")} рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдгред рд╕рдмреИрднрдиреНрджрд╛ рдмрдвреА ${BUSINESS_TYPES[mostCommonBusinessType] || ""} рд╡реНрдпрд╡рд╕рд╛рдп рдЧрд░реНрдиреЗ рд╕рдореВрд╣рд╣рд░реВ (${localizeNumber(mostCommonBusinessTypePercentage.toFixed(1), "ne")}%) рд░рд╣реЗрдХрд╛ рдЫрдиреНред рд╡рдбрд╛ рдирдВ ${localizeNumber(wardWithMostGroups.toString(), "ne")} рдорд╛ рд╕рдмреИрднрдиреНрджрд╛ рдмрдвреА ${localizeNumber(wardMaxCount.toString(), "ne")} рд╕рдореВрд╣рд╣рд░реВ рдХреНрд░рд┐рдпрд╛рд╢реАрд▓ рдЫрдиреНред рдкрд╛рд▓рд┐рдХрд╛ рд╕реНрддрд░реАрдп рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реАред`;

    const descriptionEN = `Detailed analysis of ${totalGroups} commercial agricultural and animal husbandry farmers groups operating in Pokhara Metropolitan City. ${BUSINESS_TYPES_EN[mostCommonBusinessType] || "Agricultural business"} groups are most common (${mostCommonBusinessTypePercentage.toFixed(1)}%). Ward ${wardWithMostGroups} has the highest concentration with ${wardMaxCount} active groups. Comprehensive information on municipality-wide agricultural and livestock groups.`;

    return {
      title: `рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ | ${municipalityName} рдбрд┐рдЬрд┐рдЯрд▓ рдкреНрд░реЛрдлрд╛рдЗрд▓`,
      description: descriptionNP,
      keywords: [...keywordsNP, ...keywordsEN],
      alternates: {
        canonical:
          "/profile/economics/commercial-agricultural-animal-husbandry-farmers-group",
        languages: {
          en: "/en/profile/economics/commercial-agricultural-animal-husbandry-farmers-group",
          ne: "/ne/profile/economics/commercial-agricultural-animal-husbandry-farmers-group",
        },
      },
      openGraph: {
        title: `рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ | ${municipalityName}`,
        description: descriptionNP,
        type: "article",
        locale: "ne_NP",
        alternateLocale: "en_US",
        siteName: `${municipalityName} рдбрд┐рдЬрд┐рдЯрд▓ рдкреНрд░реЛрдлрд╛рдЗрд▓`,
      },
      twitter: {
        card: "summary_large_image",
        title: `рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ | ${municipalityName}`,
        description: descriptionNP,
      },
    };
  } catch (error) {
    // Fallback metadata if data fetching fails
    return {
      title:
        "рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ | рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рдкреНрд░реЛрдлрд╛рдЗрд▓",
      description:
        "рдкрд╛рд▓рд┐рдХрд╛ рд╕реНрддрд░реАрдп рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рд╡рд░рдг рд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдгред",
    };
  }
}

const toc = [
  { level: 2, text: "рдкрд░рд┐рдЪрдп", slug: "introduction" },
  {
    level: 2,
    text: "рд╡реНрдпрд╡рд╕рд╛рдпрдХреЛ рдкреНрд░рдХрд╛рд░ рд░ рд╡рд┐рддрд░рдг",
    slug: "business-types-and-distribution",
  },
  { level: 2, text: "рд╡рдбрд╛рдЧрдд рд╡рд┐рддрд░рдг", slug: "ward-distribution" },
  { level: 2, text: "рд╕рдореВрд╣ рдкреНрд░реЛрдлрд╛рдЗрд▓", slug: "group-profile" },
  { level: 2, text: "рдЖрд░реНрдерд┐рдХ рдкреНрд░рднрд╛рд╡", slug: "economic-impact" },
  {
    level: 2,
    text: "рдЪреБрдиреМрддреА рд░ рдЕрд╡рд╕рд░рд╣рд░реВ",
    slug: "challenges-and-opportunities",
  },
  {
    level: 2,
    text: "рдирд┐рд╖реНрдХрд░реНрд╖ рд░ рд╕рд┐рдлрд╛рд░рд┐рд╕рд╣рд░реВ",
    slug: "conclusions-and-recommendations",
  },
];

export default async function CommercialAgriculturalAnimalHusbandryFarmersGroupPage() {
  // Fetch all farmers group data using tRPC
  const farmersGroupData =
    await api.profile.economics.municipalityWideCommercialAgriculturalAnimalHusbandryFarmersGroup.getAll.query();

  // Process data for overall summary
  type BusinessSummaryType = {
    type: string;
    typeName: string;
    count: number;
    percentage: number;
    icon: string;
  };

  // Calculate business type distribution
  const businessTypeCount = farmersGroupData.reduce(
    (acc: Record<string, number>, item: { type: string }) => {
      acc[item.type] = (acc[item.type] || 0) + 1;
      return acc;
    },
    {} as Record<string, number>,
  );

  const totalGroups = farmersGroupData.length;

  // Create business summary
  const businessSummary: BusinessSummaryType[] = Object.entries(
    businessTypeCount,
  )
    .map(([type, count]) => {
      return {
        type,
        typeName: BUSINESS_TYPES[type] || type,
        count: count as number,
        percentage: ((count as number) / totalGroups) * 100,
        icon: BUSINESS_ICONS[type] || "ЁЯзСтАНЁЯМ╛",
      };
    })
    .sort((a, b) => b.count - a.count); // Sort by count descending

  // Calculate ward distribution
  const wardDistribution = farmersGroupData.reduce(
    (acc: Record<number, number>, item: { wardNumber: number }) => {
      acc[item.wardNumber] = (acc[item.wardNumber] || 0) + 1;
      return acc;
    },
    {},
  );

  // Organize farms by ward
  type WardFarmsType = {
    wardNumber: number;
    farmCount: number;
    farms: {
      id: string;
      name: string;
      type: string;
      typeName: string;
      icon: string;
    }[];
  };

  const farmsByWard: WardFarmsType[] = [];

  // Process all 9 wards (whether they have farms or not)
  for (let ward = 1; ward <= 9; ward++) {
    const wardFarms = farmersGroupData
      .filter((farm: { wardNumber: number }) => farm.wardNumber === ward)
      .map((farm: { id: string; name: string; type: string }) => ({
        id: farm.id,
        name: farm.name,
        type: farm.type,
        typeName: BUSINESS_TYPES[farm.type] || farm.type,
        icon: BUSINESS_ICONS[farm.type] || "ЁЯзСтАНЁЯМ╛",
      }));

    farmsByWard.push({
      wardNumber: ward,
      farmCount: wardFarms.length,
      farms: wardFarms,
    });
  }

  // Sort wards by farm count (descending)
  farmsByWard.sort((a, b) => b.farmCount - a.farmCount);

  // Find popular business types by ward
  const popularBusinessByWard = farmsByWard.map((ward) => {
    const businessTypes = ward.farms.reduce(
      (acc: Record<string, number>, farm) => {
        acc[farm.type] = (acc[farm.type] || 0) + 1;
        return acc;
      },
      {},
    );

    // Find most common business type in this ward
    let mostCommonType = "";
    let maxCount = 0;

    Object.entries(businessTypes).forEach(([type, count]) => {
      if (count > maxCount) {
        maxCount = count;
        mostCommonType = type;
      }
    });

    return {
      wardNumber: ward.wardNumber,
      mostCommonType,
      mostCommonTypeName: BUSINESS_TYPES[mostCommonType] || mostCommonType,
      count: maxCount,
      icon: BUSINESS_ICONS[mostCommonType] || "ЁЯзСтАНЁЯМ╛",
    };
  });

  // Calculate statistics
  const statistics = {
    totalGroups,
    totalWards: Object.keys(wardDistribution).length,
    avgGroupsPerWard: totalGroups / 9, // Pokhara has 9 wards
    mostPopularBusinessType:
      businessSummary.length > 0 ? businessSummary[0].type : "",
    mostPopularBusinessTypeName:
      businessSummary.length > 0 ? businessSummary[0].typeName : "",
    mostPopularBusinessTypePercentage:
      businessSummary.length > 0 ? businessSummary[0].percentage : 0,
    wardWithMostGroups: farmsByWard.length > 0 ? farmsByWard[0].wardNumber : 0,
    maximumGroupsInAWard: farmsByWard.length > 0 ? farmsByWard[0].farmCount : 0,
  };

  return (
    <DocsLayout toc={<TableOfContents toc={toc} />}>
      {/* Add structured data for SEO */}
      <FarmersGroupSEO
        businessSummary={businessSummary}
        totalGroups={totalGroups}
        farmsByWard={farmsByWard}
        BUSINESS_TYPES={BUSINESS_TYPES}
        BUSINESS_TYPES_EN={BUSINESS_TYPES_EN}
        statistics={statistics}
      />

      <div className="flex flex-col gap-8">
        <section>
          <div className="relative rounded-lg overflow-hidden mb-8">
            <Image
              src="/images/farmers.svg"
              width={1200}
              height={400}
              alt="рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ - рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛ (Commercial Agricultural and Animal Husbandry Farmers Groups - Pokhara Metropolitan City)"
              className="w-full h-[250px] object-cover rounded-sm"
              priority
            />
          </div>

          <div className="prose prose-slate dark:prose-invert max-w-none">
            <h1 className="scroll-m-20 tracking-tight mb-6">
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ
            </h1>

            <h2 id="introduction" className="scroll-m-20">
              рдкрд░рд┐рдЪрдп
            </h2>
            <p>
              рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдХреЛ рдЖрд░реНрдерд┐рдХ
              рд╡рд┐рдХрд╛рд╕рдорд╛ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рднреВрдорд┐рдХрд╛ рдирд┐рд░реНрд╡рд╛рд╣ рдЧрд░рд┐рд░рд╣реЗрдХрд╛ рдЫрдиреНред рдпрд╕ рдХреНрд╖реЗрддреНрд░рдорд╛
              рддрд░рдХрд╛рд░реА рдЦреЗрддреА, рдмрд╛рдЦреНрд░рд╛рдкрд╛рд▓рди, рдХреБрдЦреБрд░рд╛ рдкрд╛рд▓рди, рдорд╛рдЫрд╛рдкрд╛рд▓рди, рдлрд▓рдлреВрд▓ рдЦреЗрддреА,
              рдореМрд░реАрдкрд╛рд▓рди рд▓рдЧрд╛рдпрддрдХрд╛ рд╡рд┐рднрд┐рдиреНрди рдкреНрд░рдХрд╛рд░рдХрд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди
              рд╕рдореВрд╣рд╣рд░реВ рд╕рдХреНрд░рд┐рдп рдЫрдиреНред
            </p>
            <p>
              рдпреА рд╕рдореВрд╣рд╣рд░реВрд▓реЗ рд╕реНрдерд╛рдиреАрдп рд░реЛрдЬрдЧрд╛рд░реА рд╕рд┐рд░реНрдЬрдирд╛, рдЦрд╛рджреНрдп рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдЧрд░реНрди
              рд░ рд╕реНрдерд╛рдиреАрдп рдЕрд░реНрдерддрдиреНрддреНрд░рдорд╛ рдпреЛрдЧрджрд╛рди рдЧрд░реНрдирдорд╛ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рднреВрдорд┐рдХрд╛ рдЦреЗрд▓реЗрдХрд╛
              рдЫрдиреНред рдпрд╕ рдкреГрд╖реНрдардорд╛ рдЧрд╛рдЙрдБрдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рд╡рд┐рднрд┐рдиреНрди рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди
              рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреНрд░рд╕реНрддреБрдд рдЧрд░рд┐рдПрдХреЛ рдЫред
            </p>

            <p>
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рдХреБрд▓{" "}
              {localizeNumber(totalGroups.toString(), "ne")} рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛
              рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВ рд░рд╣реЗрдХрд╛ рдЫрдиреНред рд╕рдмреИрднрдиреНрджрд╛ рдмрдвреА{" "}
              {businessSummary[0]?.typeName || ""}(
              {businessSummary[0]?.icon || ""}) рд╕рдореВрд╣рд╣рд░реВ рд░рд╣реЗрдХрд╛ рдЫрдиреН, рдЬрд╕рдХреЛ рд╕рдВрдЦреНрдпрд╛{" "}
              {localizeNumber(
                businessSummary[0]?.count.toString() || "0",
                "ne",
              )}{" "}
              (
              {localizeNumber(
                businessSummary[0]?.percentage.toFixed(1) || "0",
                "ne",
              )}
              %) рд░рд╣реЗрдХреЛ рдЫред
            </p>

            <h2
              id="business-types-and-distribution"
              className="scroll-m-20 border-b pb-2"
            >
              рд╡реНрдпрд╡рд╕рд╛рдпрдХреЛ рдкреНрд░рдХрд╛рд░ рд░ рд╡рд┐рддрд░рдг
            </h2>
            <p>
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╡рд┐рднрд┐рдиреНрди рдкреНрд░рдХрд╛рд░рдХрд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди
              рд╕рдореВрд╣рд╣рд░реВ рд╕рдВрдЪрд╛рд▓рдирдорд╛ рдЫрдиреНред рдореБрдЦреНрдп рд╡реНрдпрд╡рд╕рд╛рдпрд╣рд░реВ рд░ рддрд┐рдирдХреЛ рд╡рд┐рддрд░рдг рдирд┐рдореНрди рдЕрдиреБрд╕рд╛рд░
              рд░рд╣реЗрдХреЛ рдЫ:
            </p>

            <ul>
              {businessSummary.slice(0, 8).map((business, index) => (
                <li key={index}>
                  <strong>
                    {business.icon} {business.typeName}
                  </strong>
                  : {localizeNumber(business.count.toString(), "ne")} рд╕рдореВрд╣ (
                  {localizeNumber(business.percentage.toFixed(1), "ne")}%)
                </li>
              ))}
              {businessSummary.length > 8 && (
                <li>
                  <strong>рдЕрдиреНрдп</strong>:{" "}
                  {localizeNumber(
                    (
                      totalGroups -
                      businessSummary
                        .slice(0, 8)
                        .reduce((sum, item) => sum + item.count, 0)
                    ).toString(),
                    "ne",
                  )}{" "}
                  рд╕рдореВрд╣
                </li>
              )}
            </ul>
          </div>

          {/* Client component for charts */}
          <FarmersGroupCharts
            businessSummary={businessSummary}
            totalGroups={totalGroups}
            farmsByWard={farmsByWard}
            BUSINESS_TYPES={BUSINESS_TYPES}
            BUSINESS_COLORS={BUSINESS_COLORS}
            popularBusinessByWard={popularBusinessByWard}
            statistics={statistics}
          />

          <div className="prose prose-slate dark:prose-invert max-w-none mt-8">
            <h2 id="ward-distribution" className="scroll-m-20 border-b pb-2">
              рд╡рдбрд╛рдЧрдд рд╡рд┐рддрд░рдг
            </h2>
            <p>
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдХрд╛ рд╡рд┐рднрд┐рдиреНрди рд╡рдбрд╛рд╣рд░реВрдорд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди
              рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рддрд░рдг рдЕрд╕рдорд╛рди рд░рд╣реЗрдХреЛ рдЫред рд╡рдбрд╛ рдирдВ.{" "}
              {localizeNumber(statistics.wardWithMostGroups.toString(), "ne")}{" "}
              рдорд╛ рд╕рдмреИрднрдиреНрджрд╛ рдмрдвреА{" "}
              {localizeNumber(statistics.maximumGroupsInAWard.toString(), "ne")}{" "}
              рд╕рдореВрд╣рд╣рд░реВ рд░рд╣реЗрдХрд╛ рдЫрдиреН, рдЬрд╣рд╛рдБ рдореБрдЦреНрдпрддрдпрд╛{" "}
              {popularBusinessByWard.find(
                (item) => item.wardNumber === statistics.wardWithMostGroups,
              )?.mostCommonTypeName || ""}{" "}
              рд╡реНрдпрд╡рд╕рд╛рдп рд╕рдВрдЪрд╛рд▓рд┐рдд рдЫрдиреНред
            </p>

            <p>
              рдЧрд╛рдЙрдБрдкрд╛рд▓рд┐рдХрд╛рдХреЛ рдФрд╕рддрдорд╛ рдкреНрд░рддреНрдпреЗрдХ рд╡рдбрд╛рдорд╛{" "}
              {localizeNumber(statistics.avgGroupsPerWard.toFixed(1), "ne")}{" "}
              рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╕рдореВрд╣рд╣рд░реВ рдХреНрд░рд┐рдпрд╛рд╢реАрд▓ рдЫрдиреНред рд╡рдбрд╛рдЧрдд рд╡рд┐рддрд░рдг рд░ рддрд┐рдирдорд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд
              рд╡реНрдпрд╡рд╕рд╛рдпрд╣рд░реВрдХреЛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рддрд▓ рдкреНрд░рд╕реНрддреБрдд рдЧрд░рд┐рдПрдХреЛ рдЫред
            </p>
          </div>

          {/* Ward-based farms list component */}
          <WardBasedFarmsList
            farmsByWard={farmsByWard}
            BUSINESS_TYPES={BUSINESS_TYPES}
            BUSINESS_COLORS={BUSINESS_COLORS}
            BUSINESS_ICONS={BUSINESS_ICONS}
            statistics={statistics}
            popularBusinessByWard={popularBusinessByWard}
          />

          <div className="prose prose-slate dark:prose-invert max-w-none mt-8">
            <FarmersGroupAnalysisSection
              businessSummary={businessSummary}
              totalGroups={totalGroups}
              farmsByWard={farmsByWard}
              BUSINESS_TYPES={BUSINESS_TYPES}
              BUSINESS_TYPES_EN={BUSINESS_TYPES_EN}
              BUSINESS_COLORS={BUSINESS_COLORS}
              statistics={statistics}
              popularBusinessByWard={popularBusinessByWard}
            />

            <h2
              id="challenges-and-opportunities"
              className="scroll-m-20 border-b pb-2 mt-12"
            >
              рдЪреБрдиреМрддреА рд░ рдЕрд╡рд╕рд░рд╣рд░реВ
            </h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-xl font-semibold">рдореБрдЦреНрдп рдЪреБрдиреМрддреАрд╣рд░реВ</h3>
                <ul className="space-y-2 mt-4">
                  <li className="flex gap-2">
                    <span className="text-red-500">тАв</span>
                    <span>
                      <strong>рдмрдЬрд╛рд░ рдкрд╣реБрдБрдЪ:</strong> рдЙрддреНрдкрд╛рджрд┐рдд рд╡рд╕реНрддреБрд╣рд░реВрдХреЛ рдмрд┐рдХреНрд░реАрдХрд╛
                      рд▓рд╛рдЧрд┐ рдЙрдкрдпреБрдХреНрдд рдмрдЬрд╛рд░рдХреЛ рдЕрднрд╛рд╡ рд░ рдмрдЬрд╛рд░ рд╕рдореНрдордХреЛ рдкрд╣реБрдБрдЪрдорд╛ рдХрдард┐рдирд╛рдИ
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">тАв</span>
                    <span>
                      <strong>рдкреНрд░рд╛рд╡рд┐рдзрд┐рдХ рдЬреНрдЮрд╛рди:</strong> рдЖрдзреБрдирд┐рдХ рдХреГрд╖рд┐ рд░ рдкрд╢реБрдкрд╛рд▓рди
                      рдкреНрд░рд╡рд┐рдзрд┐рд╣рд░реВрдХреЛ рдЬреНрдЮрд╛рди рд░ рд╕реАрдкрдХреЛ рдХрдореА
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">тАв</span>
                    <span>
                      <strong>рд╡рд┐рддреНрддреАрдп рдкрд╣реБрдБрдЪ:</strong> рд╡реНрдпрд╡рд╕рд╛рдп рд╡рд┐рд╕реНрддрд╛рд░рдХрд╛ рд▓рд╛рдЧрд┐
                      рдЖрд╡рд╢реНрдпрдХ рд╡рд┐рддреНрддреАрдп рд╕реНрд░реЛрддрдХреЛ рдЕрднрд╛рд╡
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">тАв</span>
                    <span>
                      <strong>рдЬрд▓рд╡рд╛рдпреБ рдкрд░рд┐рд╡рд░реНрддрди:</strong> рдЕрдирд┐рдпрдорд┐рдд рд╡рд░реНрд╖рд╛ рд░ рддрд╛рдкрдХреНрд░рдо
                      рдкрд░рд┐рд╡рд░реНрддрдирд▓реЗ рдХреГрд╖рд┐ рдЙрддреНрдкрд╛рджрдирдорд╛ рдирдХрд╛рд░рд╛рддреНрдордХ рдкреНрд░рднрд╛рд╡
                    </span>
                  </li>
                </ul>
              </div>

              <div>
                <h3 className="text-xl font-semibold">рдЕрд╡рд╕рд░рд╣рд░реВ</h3>
                <ul className="space-y-2 mt-4">
                  <li className="flex gap-2">
                    <span className="text-green-500">тАв</span>
                    <span>
                      <strong>рд╕реНрдерд╛рдиреАрдп рдЙрддреНрдкрд╛рджрди рдкреНрд░реЛрддреНрд╕рд╛рд╣рди:</strong> рд╕реНрдерд╛рдиреАрдп
                      рдЙрддреНрдкрд╛рджрдирд▓рд╛рдИ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджрд┐рдиреЗ рдиреАрддрд┐ рд░ рдХрд╛рд░реНрдпрдХреНрд░рдорд╣рд░реВ
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">тАв</span>
                    <span>
                      <strong>рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдорд╛рдЧ:</strong> рдЬреИрд╡рд┐рдХ рдЙрддреНрдкрд╛рджрдирд╣рд░реВрдХреЛ рдмрдвреНрджреЛ
                      рдорд╛рдЧ рд░ рдЙрдЪреНрдЪ рдореВрд▓реНрдп
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">тАв</span>
                    <span>
                      <strong>рдкреНрд░рд╡рд┐рдзрд┐ рд╣рд╕реНрддрд╛рдиреНрддрд░рдг:</strong> рдЖрдзреБрдирд┐рдХ рдХреГрд╖рд┐ рдкреНрд░рд╡рд┐рдзрд┐ рд░
                      рдЙрдкрдХрд░рдгрд╣рд░реВрдХреЛ рдЙрдкрд▓рдмреНрдзрддрд╛ рд░ рдкреНрд░рдпреЛрдЧ
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">тАв</span>
                    <span>
                      <strong>рд╕рд╣рдХрд╛рд░реНрдп рд░ рдиреЗрдЯрд╡рд░реНрдХрд┐рдЩ:</strong> рд╡рд┐рднрд┐рдиреНрди рд╕рдореВрд╣рд╣рд░реВ рдмреАрдЪ
                      рд╕рд╣рдХрд╛рд░реНрдп рд░ рдЕрдиреБрднрд╡ рдЖрджрд╛рдирдкреНрд░рджрд╛рдирдХрд╛ рдЕрд╡рд╕рд░рд╣рд░реВ
                    </span>
                  </li>
                </ul>
              </div>
            </div>

            <h2
              id="conclusions-and-recommendations"
              className="scroll-m-20 border-b pb-2 mt-12"
            >
              рдирд┐рд╖реНрдХрд░реНрд╖ рд░ рд╕рд┐рдлрд╛рд░рд┐рд╕рд╣рд░реВ
            </h2>

            <p>
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ
              рдЕрд╡рд╕реНрдерд╛рдХреЛ рд╡рд┐рд╢реНрд▓реЗрд╖рдгрдмрд╛рдЯ рдирд┐рдореНрди рдирд┐рд╖реНрдХрд░реНрд╖ рд░ рд╕рд┐рдлрд╛рд░рд┐рд╕рд╣рд░реВ рдкреНрд░рд╕реНрддреБрдд рдЧрд░рд┐рдПрдХрд╛
              рдЫрдиреН:
            </p>

            <div className="pl-6 space-y-4">
              <div className="flex">
                <span className="font-bold mr-2">рез.</span>
                <div>
                  <strong>рд╕рдореВрд╣ рдХреНрд╖рдорддрд╛ рд╡рд┐рдХрд╛рд╕:</strong> рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛
                  рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рдХреНрд╖рдорддрд╛ рд╡рд┐рдХрд╛рд╕рдХрд╛ рд▓рд╛рдЧрд┐ рдирд┐рдпрдорд┐рдд рддрд╛рд▓рд┐рдо рд░ рдкреНрд░рд╛рд╡рд┐рдзрд┐рдХ
                  рд╕рд╣рдпреЛрдЧрдХреЛ рд╡реНрдпрд╡рд╕реНрдерд╛ рдЧрд░реНрдиреБрдкрд░реНрдиреЗред
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">реи.</span>
                <div>
                  <strong>рдореВрд▓реНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛ рд╡рд┐рдХрд╛рд╕:</strong> рдЙрддреНрдкрд╛рджрдирджреЗрдЦрд┐
                  рдмрдЬрд╛рд░реАрдХрд░рдгрд╕рдореНрдордХреЛ рдореВрд▓реНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛ рд╡рд┐рдХрд╛рд╕рдХрд╛ рд▓рд╛рдЧрд┐ рдЖрд╡рд╢реНрдпрдХ рдкреВрд░реНрд╡рд╛рдзрд╛рд░ рд░
                  рд╕рдВрдпрдиреНрддреНрд░рдХреЛ рд╡рд┐рдХрд╛рд╕ рдЧрд░реНрдиреБрдкрд░реНрдиреЗред
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">рей.</span>
                <div>
                  <strong>рд╕рдорддрд╛рдореВрд▓рдХ рд╡рдбрд╛рдЧрдд рд╡рд┐рдХрд╛рд╕:</strong> рд╕рдмреИ рд╡рдбрд╛рд╣рд░реВрдорд╛ рд╕рдорддрд╛рдореВрд▓рдХ
                  рд░реВрдкрдорд╛ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рдХрд╛рд╕ рд░ рдкреНрд░рд╡рд░реНрджреНрдзрдирдХрд╛ рд▓рд╛рдЧрд┐
                  рд╡рд┐рд╢реЗрд╖ рдХрд╛рд░реНрдпрдХреНрд░рдорд╣рд░реВ рд╕рдВрдЪрд╛рд▓рди рдЧрд░реНрдиреБрдкрд░реНрдиреЗред
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">рек.</span>
                <div>
                  <strong>рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдкреНрд░рд╡рд░реНрджреНрдзрди:</strong> рдЬреИрд╡рд┐рдХ рдХреГрд╖рд┐ рдЙрддреНрдкрд╛рджрдирд▓рд╛рдИ
                  рдкреНрд░реЛрддреНрд╕рд╛рд╣рди рджрд┐рдиреЗ рд░ рд╡рд╛рддрд╛рд╡рд░рдгрдореИрддреНрд░реА рдХреГрд╖рд┐ рдкрджреНрдзрддрд┐рд▓рд╛рдИ рдмрдврд╛рд╡рд╛ рджрд┐рдиреЗ рдиреАрддрд┐
                  рдЕрд╡рд▓рдореНрдмрди рдЧрд░реНрдиреБрдкрд░реНрдиреЗред
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">рел.</span>
                <div>
                  <strong>рд╡рд┐рддреНрддреАрдп рдкрд╣реБрдБрдЪ рд╕реБрдзрд╛рд░:</strong> рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди
                  рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рддреНрддреАрдп рдкрд╣реБрдБрдЪ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдЧрд░реНрди рд╕рд╣реБрд▓рд┐рдпрддрдкреВрд░реНрдг рдЛрдг рд░
                  рдЕрдиреБрджрд╛рдирдХреЛ рд╡реНрдпрд╡рд╕реНрдерд╛ рдорд┐рд▓рд╛рдЙрдиреБрдкрд░реНрдиреЗред
                </div>
              </div>
            </div>

            <p className="mt-6">
              рдкреЛрдЦрд░рд╛ рдорд╣рд╛рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛рдорд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдХреГрд╖рд┐ рддрдерд╛ рдкрд╢реБрдкрд╛рд▓рди рд╕рдореВрд╣рд╣рд░реВрдХреЛ рд╡рд┐рдХрд╛рд╕ рд░
              рдкреНрд░рд╡рд░реНрджреНрдзрдирд▓реЗ рд╕реНрдерд╛рдиреАрдп рдЕрд░реНрдерддрдиреНрддреНрд░рд▓рд╛рдИ рдмрд▓рд┐рдпреЛ рдмрдирд╛рдЙрди, рд░реЛрдЬрдЧрд╛рд░реА рд╕рд┐рд░реНрдЬрдирд╛
              рдЧрд░реНрди рд░ рдЦрд╛рджреНрдп рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдЧрд░реНрди рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рдпреЛрдЧрджрд╛рди рдкреБрд░реНтАНрдпрд╛рдЙрдиреЗ
              рдирд┐рд╢реНрдЪрд┐рдд рдЫред рдпрд╕рдХрд╛ рд▓рд╛рдЧрд┐ рд╕реНрдерд╛рдиреАрдп рд╕рд░рдХрд╛рд░, рдкреНрд░рд╛рд╡рд┐рдзрд┐рдХ рд╕рдВрд╕реНрдерд╛рд╣рд░реВ рд░ рдХреГрд╖рд┐
              рд╕рдореВрд╣рд╣рд░реВ рдмреАрдЪрдХреЛ рд╕рдордиреНрд╡рдп рд░ рд╕рд╣рдХрд╛рд░реНрдпрд▓рд╛рдИ рдердк рдкреНрд░рднрд╛рд╡рдХрд╛рд░реА рдмрдирд╛рдЙрди рдЖрд╡рд╢реНрдпрдХ рдЫред
            </p>
          </div>
        </section>
      </div>
    </DocsLayout>
  );
}
