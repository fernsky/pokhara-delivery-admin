import { Metadata } from "next";
import { DocsLayout } from "@/components/layout/DocsLayout";
import { TableOfContents } from "@/components/TableOfContents";
import Image from "next/image";
import { api } from "@/trpc/server";
import { localizeNumber } from "@/lib/utils/localize-number";
import CooperativesCharts from "./_components/cooperatives-charts";
import CooperativesAnalysisSection from "./_components/cooperatives-analysis-section";
import CooperativesSEO from "./_components/cooperatives-seo";
import WardBasedCooperativesList from "./_components/ward-based-cooperatives-list";
import { cooperativeTypeOptions } from "@/server/api/routers/profile/economics/cooperatives.schema";

// Force dynamic rendering since we're using tRPC which relies on headers
export const dynamic = "force-dynamic";

// Define the locales for which this page should be statically generated
export async function generateStaticParams() {
  return [{ locale: "en" }];
}

// Optional: Add revalidation period
export const revalidate = 86400; // Revalidate once per day

// Define English names for cooperative types (for SEO)
const COOPERATIVE_TYPES_EN: Record<string, string> = {
  SAVINGS_CREDIT: "Savings and Credit",
  MULTI_PURPOSE: "Multi-Purpose",
  AGRICULTURE: "Agriculture",
  DAIRY: "Dairy",
  COMMUNITY: "Community",
  WOMENS: "Women's",
  FARMERS: "Farmers",
  VEGETABLE: "Vegetable",
  OTHER: "Other",
};

// Define Nepali names for cooperative types
const COOPERATIVE_TYPES: Record<string, string> = cooperativeTypeOptions.reduce(
  (acc, option) => ({
    ...acc,
    [option.value]: option.label,
  }),
  {},
);

// Define colors for cooperative types
const COOPERATIVE_COLORS: Record<string, string> = {
  SAVINGS_CREDIT: "#27ae60", // Green for savings and credit
  MULTI_PURPOSE: "#9b59b6", // Purple for multi-purpose
  AGRICULTURE: "#e74c3c", // Red for agriculture
  DAIRY: "#3498db", // Blue for dairy
  COMMUNITY: "#f1c40f", // Yellow for community
  WOMENS: "#d35400", // Orange for women's
  FARMERS: "#c0392b", // Dark red for farmers
  VEGETABLE: "#16a085", // Teal for vegetable
  OTHER: "#95a5a6", // Light gray for other
};

// Icon types for cooperative types
const COOPERATIVE_ICONS: Record<string, string> = {
  SAVINGS_CREDIT: "üí∞",
  MULTI_PURPOSE: "üîÑ",
  AGRICULTURE: "üåæ",
  DAIRY: "ü•õ",
  COMMUNITY: "üèòÔ∏è",
  WOMENS: "üë©",
  FARMERS: "üßë‚Äçüåæ",
  VEGETABLE: "ü•¨",
  OTHER: "üè¢",
};

// This function will generate metadata dynamically based on the actual data
export async function generateMetadata(): Promise<Metadata> {
  try {
    // Fetch data for SEO using tRPC
    const cooperativesData =
      await api.profile.economics.cooperatives.getAll.query();
    const municipalityName = "‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ"; // Khajura metropolitan city

    // Process data for SEO
    const totalCooperatives = cooperativesData.length;
    const cooperativeTypeCount = cooperativesData.reduce(
      (acc: Record<string, number>, item: { cooperativeType: string }) => {
        acc[item.cooperativeType] = (acc[item.cooperativeType] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    );

    // Find most common cooperative type
    let mostCommonCooperativeType = "";
    let mostCommonCount = 0;
    Object.entries(cooperativeTypeCount).forEach(([type, count]) => {
      const countValue = count as number;
      if (countValue > mostCommonCount) {
        mostCommonCount = countValue;
        mostCommonCooperativeType = type;
      }
    });

    const mostCommonCooperativeTypePercentage =
      (mostCommonCount / totalCooperatives) * 100;

    // Calculate ward distribution
    const wardDistribution = cooperativesData.reduce(
      (acc: Record<number, number>, item: { wardNumber: number }) => {
        acc[item.wardNumber] = (acc[item.wardNumber] || 0) + 1;
        return acc;
      },
      {},
    );

    // Find ward with most cooperatives
    let wardWithMostCooperatives = 0;
    let wardMaxCount = 0;
    Object.entries(wardDistribution).forEach(([ward, count]) => {
      if (Number(count) > wardMaxCount) {
        wardMaxCount = Number(count);
        wardWithMostCooperatives = Number(ward);
      }
    });

    // Create rich keywords with actual data
    const keywordsNP = [
      "‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä",
      "‡§≤‡§ø‡§ñ‡•Å ‡§™‡§ø‡§ï‡•á ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ",
      "‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä",
      "‡§≤‡§ø‡§ñ‡•Å ‡§™‡§ø‡§ï‡•á ‡§¨‡§ö‡§§ ‡§§‡§•‡§æ ‡§ã‡§£ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä",
      `‡§≤‡§ø‡§ñ‡•Å ‡§™‡§ø‡§ï‡•á ${COOPERATIVE_TYPES[mostCommonCooperativeType] || "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ"}`,
      `‡§µ‡§°‡§æ ${localizeNumber(wardWithMostCooperatives.toString(), "ne")} ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä`,
      `‡§≤‡§ø‡§ñ‡•Å ‡§™‡§ø‡§ï‡•á ${localizeNumber(totalCooperatives.toString(), "ne")} ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ`,
      "‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ",
    ];

    const keywordsEN = [
      "Khajura metropolitan city cooperatives",
      "Khajura cooperative institutions",
      "Municipality-wide cooperatives",
      "Savings and credit cooperatives in Khajura",
      `${COOPERATIVE_TYPES_EN[mostCommonCooperativeType] || "Cooperatives"} in Khajura`,
      `Ward ${wardWithMostCooperatives} cooperatives`,
      `Khajura ${totalCooperatives} cooperative institutions`,
      "Women's cooperatives",
    ];

    // Create detailed description with actual data
    const descriptionNP = `‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ${localizeNumber(totalCooperatives.toString(), "ne")} ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡•§ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä ${COOPERATIVE_TYPES[mostCommonCooperativeType] || ""} ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç (${localizeNumber(mostCommonCooperativeTypePercentage.toFixed(1), "ne")}%) ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç‡•§ ‡§µ‡§°‡§æ ‡§®‡§Ç ${localizeNumber(wardWithMostCooperatives.toString(), "ne")} ‡§Æ‡§æ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä ${localizeNumber(wardMaxCount.toString(), "ne")} ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§∂‡•Ä‡§≤ ‡§õ‡§®‡•ç‡•§ ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä‡•§`;

    const descriptionEN = `Detailed analysis of ${totalCooperatives} cooperative institutions operating in Khajura metropolitan city. ${COOPERATIVE_TYPES_EN[mostCommonCooperativeType] || "Cooperatives"} are most common (${mostCommonCooperativeTypePercentage.toFixed(1)}%). Ward ${wardWithMostCooperatives} has the highest concentration with ${wardMaxCount} active cooperatives. Comprehensive information on municipality-wide cooperatives.`;

    return {
      title: `‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç | ${municipalityName} ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤`,
      description: descriptionNP,
      keywords: [...keywordsNP, ...keywordsEN],
      alternates: {
        canonical: "/profile/economics/cooperatives",
        languages: {
          en: "/en/profile/economics/cooperatives",
          ne: "/ne/profile/economics/cooperatives",
        },
      },
      openGraph: {
        title: `‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç | ${municipalityName}`,
        description: descriptionNP,
        type: "article",
        locale: "ne_NP",
        alternateLocale: "en_US",
        siteName: `${municipalityName} ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤`,
      },
      twitter: {
        card: "summary_large_image",
        title: `‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç | ${municipalityName}`,
        description: descriptionNP,
      },
    };
  } catch (error) {
    // Fallback metadata if data fetching fails
    return {
      title: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç | ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
      description: "‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡•§",
    };
  }
}

const toc = [
  { level: 2, text: "‡§™‡§∞‡§ø‡§ö‡§Ø", slug: "introduction" },
  {
    level: 2,
    text: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£",
    slug: "cooperative-types-and-distribution",
  },
  { level: 2, text: "‡§µ‡§°‡§æ‡§ó‡§§ ‡§µ‡§ø‡§§‡§∞‡§£", slug: "ward-distribution" },
  { level: 2, text: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤", slug: "cooperative-profile" },
  { level: 2, text: "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ", slug: "economic-impact" },
  {
    level: 2,
    text: "‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§∞ ‡§Ö‡§µ‡§∏‡§∞‡§π‡§∞‡•Ç",
    slug: "challenges-and-opportunities",
  },
  {
    level: 2,
    text: "‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏‡§π‡§∞‡•Ç",
    slug: "conclusions-and-recommendations",
  },
];

export default async function CooperativesPage() {
  // Fetch all cooperatives data using tRPC
  const cooperativesData =
    await api.profile.economics.cooperatives.getAll.query();

  // Process data for overall summary
  type CooperativeSummaryType = {
    type: string;
    typeName: string;
    count: number;
    percentage: number;
    icon: string;
  };

  // Calculate cooperative type distribution
  const cooperativeTypeCount = cooperativesData.reduce(
    (acc: Record<string, number>, item: { cooperativeType: string }) => {
      acc[item.cooperativeType] = (acc[item.cooperativeType] || 0) + 1;
      return acc;
    },
    {} as Record<string, number>,
  );

  const totalCooperatives = cooperativesData.length;

  // Create cooperative summary
  const cooperativeSummary: CooperativeSummaryType[] = Object.entries(
    cooperativeTypeCount,
  )
    .map(([type, count]) => {
      return {
        type,
        typeName: COOPERATIVE_TYPES[type] || type,
        count: count as number,
        percentage: ((count as number) / totalCooperatives) * 100,
        icon: COOPERATIVE_ICONS[type] || "üè¢",
      };
    })
    .sort((a, b) => b.count - a.count); // Sort by count descending

  // Calculate ward distribution
  const wardDistribution = cooperativesData.reduce(
    (acc: Record<number, number>, item: { wardNumber: number }) => {
      acc[item.wardNumber] = (acc[item.wardNumber] || 0) + 1;
      return acc;
    },
    {},
  );

  // Organize cooperatives by ward
  type WardCooperativesType = {
    wardNumber: number;
    cooperativeCount: number;
    cooperatives: {
      id: string;
      cooperativeName: string;
      cooperativeType: string;
      typeName: string;
      phoneNumber: string;
      remarks: string;
      icon: string;
    }[];
  };

  const cooperativesByWard: WardCooperativesType[] = [];

  // Process all 9 wards (whether they have cooperatives or not)
  for (let ward = 1; ward <= 9; ward++) {
    const wardCooperatives = cooperativesData
      .filter((coop: { wardNumber: number }) => coop.wardNumber === ward)
      .map(
        (coop: {
          id: string;
          cooperativeName: string;
          cooperativeType: string;
          phoneNumber?: string;
          remarks?: string;
        }) => ({
          id: coop.id,
          cooperativeName: coop.cooperativeName,
          cooperativeType: coop.cooperativeType,
          typeName:
            COOPERATIVE_TYPES[coop.cooperativeType] || coop.cooperativeType,
          phoneNumber: coop.phoneNumber || "",
          remarks: coop.remarks || "",
          icon: COOPERATIVE_ICONS[coop.cooperativeType] || "üè¢",
        }),
      );

    cooperativesByWard.push({
      wardNumber: ward,
      cooperativeCount: wardCooperatives.length,
      cooperatives: wardCooperatives,
    });
  }

  // Sort wards by cooperative count (descending)
  cooperativesByWard.sort((a, b) => b.cooperativeCount - a.cooperativeCount);

  // Find popular cooperative types by ward
  const popularCooperativeByWard = cooperativesByWard.map((ward) => {
    const cooperativeTypes = ward.cooperatives.reduce(
      (acc: Record<string, number>, coop) => {
        acc[coop.cooperativeType] = (acc[coop.cooperativeType] || 0) + 1;
        return acc;
      },
      {},
    );

    // Find most common cooperative type in this ward
    let mostCommonType = "";
    let maxCount = 0;

    Object.entries(cooperativeTypes).forEach(([type, count]) => {
      if (count > maxCount) {
        maxCount = count;
        mostCommonType = type;
      }
    });

    return {
      wardNumber: ward.wardNumber,
      mostCommonType,
      mostCommonTypeName: COOPERATIVE_TYPES[mostCommonType] || mostCommonType,
      count: maxCount,
      icon: COOPERATIVE_ICONS[mostCommonType] || "üè¢",
    };
  });

  // Calculate statistics
  const statistics = {
    totalCooperatives,
    totalWards: Object.keys(wardDistribution).length,
    avgCooperativesPerWard: totalCooperatives / 9, // Khajura has 9 wards
    mostPopularCooperativeType:
      cooperativeSummary.length > 0 ? cooperativeSummary[0].type : "",
    mostPopularCooperativeTypeName:
      cooperativeSummary.length > 0 ? cooperativeSummary[0].typeName : "",
    mostPopularCooperativeTypePercentage:
      cooperativeSummary.length > 0 ? cooperativeSummary[0].percentage : 0,
    wardWithMostCooperatives:
      cooperativesByWard.length > 0 ? cooperativesByWard[0].wardNumber : 0,
    maximumCooperativesInAWard:
      cooperativesByWard.length > 0
        ? cooperativesByWard[0].cooperativeCount
        : 0,
    provinceLevelCooperatives: cooperativesData.filter(
      (coop: { remarks?: string }) => coop.remarks?.includes("‡§™‡•ç‡§∞‡§¶‡•á‡§∂ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø"),
    ).length,
  };

  return (
    <DocsLayout toc={<TableOfContents toc={toc} />}>
      {/* Add structured data for SEO */}
      <CooperativesSEO
        cooperativeSummary={cooperativeSummary}
        totalCooperatives={totalCooperatives}
        cooperativesByWard={cooperativesByWard}
        COOPERATIVE_TYPES={COOPERATIVE_TYPES}
        COOPERATIVE_TYPES_EN={COOPERATIVE_TYPES_EN}
        statistics={statistics}
      />

      <div className="flex flex-col gap-8">
        <section>
          <div className="relative rounded-lg overflow-hidden mb-8">
            <Image
              src="/images/cooperatives.svg"
              width={1200}
              height={400}
              alt="‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç - ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ (Cooperative Institutions - Khajura metropolitan city)"
              className="w-full h-[250px] object-cover rounded-sm"
              priority
            />
          </div>

          <div className="prose prose-slate dark:prose-invert max-w-none">
            <h1 className="scroll-m-20 tracking-tight mb-6">
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç
            </h1>

            <h2 id="introduction" className="scroll-m-20">
              ‡§™‡§∞‡§ø‡§ö‡§Ø
            </h2>
            <p>
              ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏‡§Æ‡§æ ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£
              ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§µ‡§æ‡§π ‡§ó‡§∞‡§ø‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç‡•§ ‡§¨‡§ö‡§§ ‡§§‡§•‡§æ ‡§ã‡§£, ‡§¨‡§π‡•Å‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡•Ä‡§Ø, ‡§ï‡•É‡§∑‡§ø,
              ‡§Æ‡§π‡§ø‡§≤‡§æ, ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§≤‡§ó‡§æ‡§Ø‡§§‡§ï‡§æ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ
              ‡§≠‡§∞‡§ø ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§∂‡•Ä‡§≤ ‡§õ‡§®‡•ç‡•§
            </p>
            <p>
              ‡§Ø‡•Ä ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§≤‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§π‡§∞‡•Ç‡§ï‡•ã ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§â‡§®‡•ç‡§®‡§§‡§ø ‡§ó‡§∞‡•ç‡§®,
              ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§™‡•ç‡§∞‡§µ‡§∞‡•ç‡§¶‡•ç‡§ß‡§® ‡§ó‡§∞‡•ç‡§® ‡§∞ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Ö‡§∞‡•ç‡§•‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§≤‡§æ‡§à ‡§∏‡§¨‡§≤‡•Ä‡§ï‡§∞‡§£ ‡§ó‡§∞‡•ç‡§®
              ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ñ‡•á‡§≤‡•á‡§ï‡§æ ‡§õ‡§®‡•ç‡•§ ‡§Ø‡§∏ ‡§™‡•É‡§∑‡•ç‡§†‡§Æ‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§
              ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£
              ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ó‡§∞‡§ø‡§è‡§ï‡•ã ‡§õ‡•§
            </p>

            <p>
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§ï‡•Å‡§≤{" "}
              {localizeNumber(totalCooperatives.toString(), "ne")} ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä
              ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç‡•§ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä{" "}
              {cooperativeSummary[0]?.typeName || ""}(
              {cooperativeSummary[0]?.icon || ""}) ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç, ‡§ú‡§∏‡§ï‡•ã
              ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ{" "}
              {localizeNumber(
                cooperativeSummary[0]?.count.toString() || "0",
                "ne",
              )}{" "}
              (
              {localizeNumber(
                cooperativeSummary[0]?.percentage.toFixed(1) || "0",
                "ne",
              )}
              %) ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ‡•§ ‡§Ø‡§∏‡§Æ‡§ß‡•ç‡§Ø‡•á{" "}
              {localizeNumber(
                statistics.provinceLevelCooperatives.toString(),
                "ne",
              )}{" "}
              ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§™‡•ç‡§∞‡§¶‡•á‡§∂ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç‡•§
            </p>

            <h2
              id="cooperative-types-and-distribution"
              className="scroll-m-20 border-b pb-2"
            >
              ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£
            </h2>
            <p>
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§®‡§Æ‡§æ
              ‡§õ‡§®‡•ç‡•§ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∞ ‡§§‡§ø‡§®‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ:
            </p>

            <ul>
              {cooperativeSummary.slice(0, 8).map((cooperative, index) => (
                <li key={index}>
                  <strong>
                    {cooperative.icon} {cooperative.typeName}
                  </strong>
                  : {localizeNumber(cooperative.count.toString(), "ne")} ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ
                  ({localizeNumber(cooperative.percentage.toFixed(1), "ne")}%)
                </li>
              ))}
              {cooperativeSummary.length > 8 && (
                <li>
                  <strong>‡§Ö‡§®‡•ç‡§Ø</strong>:{" "}
                  {localizeNumber(
                    (
                      totalCooperatives -
                      cooperativeSummary
                        .slice(0, 8)
                        .reduce((sum, item) => sum + item.count, 0)
                    ).toString(),
                    "ne",
                  )}{" "}
                  ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ
                </li>
              )}
            </ul>
          </div>

          {/* Client component for charts */}
          <CooperativesCharts
            cooperativeSummary={cooperativeSummary}
            totalCooperatives={totalCooperatives}
            cooperativesByWard={cooperativesByWard}
            COOPERATIVE_TYPES={COOPERATIVE_TYPES}
            COOPERATIVE_COLORS={COOPERATIVE_COLORS}
            popularCooperativeByWard={popularCooperativeByWard}
            statistics={statistics}
          />

          <div className="prose prose-slate dark:prose-invert max-w-none mt-8">
            <h2 id="ward-distribution" className="scroll-m-20 border-b pb-2">
              ‡§µ‡§°‡§æ‡§ó‡§§ ‡§µ‡§ø‡§§‡§∞‡§£
            </h2>
            <p>
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡§æ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§µ‡§°‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£
              ‡§Ö‡§∏‡§Æ‡§æ‡§® ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ‡•§ ‡§µ‡§°‡§æ ‡§®‡§Ç.{" "}
              {localizeNumber(
                statistics.wardWithMostCooperatives.toString(),
                "ne",
              )}{" "}
              ‡§Æ‡§æ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä{" "}
              {localizeNumber(
                statistics.maximumCooperativesInAWard.toString(),
                "ne",
              )}{" "}
              ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§∞‡§π‡•á‡§ï‡§æ ‡§õ‡§®‡•ç, ‡§ú‡§π‡§æ‡§Å ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§Ø‡§æ{" "}
              {popularCooperativeByWard.find(
                (item) =>
                  item.wardNumber === statistics.wardWithMostCooperatives,
              )?.mostCommonTypeName || ""}{" "}
              ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§õ‡§®‡•ç‡•§
            </p>

            <p>
              ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§î‡§∏‡§§‡§Æ‡§æ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡§°‡§æ‡§Æ‡§æ{" "}
              {localizeNumber(
                statistics.avgCooperativesPerWard.toFixed(1),
                "ne",
              )}{" "}
              ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§∂‡•Ä‡§≤ ‡§õ‡§®‡•ç‡•§ ‡§µ‡§°‡§æ‡§ó‡§§ ‡§µ‡§ø‡§§‡§∞‡§£ ‡§∞ ‡§§‡§ø‡§®‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã
              ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§§‡§≤ ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ó‡§∞‡§ø‡§è‡§ï‡•ã ‡§õ‡•§
            </p>
          </div>

          {/* Ward-based cooperatives list component */}
          <WardBasedCooperativesList
            cooperativesByWard={cooperativesByWard}
            COOPERATIVE_TYPES={COOPERATIVE_TYPES}
            COOPERATIVE_COLORS={COOPERATIVE_COLORS}
            COOPERATIVE_ICONS={COOPERATIVE_ICONS}
            statistics={statistics}
            popularCooperativeByWard={popularCooperativeByWard}
          />

          <div className="prose prose-slate dark:prose-invert max-w-none mt-8">
            <CooperativesAnalysisSection
              cooperativeSummary={cooperativeSummary}
              totalCooperatives={totalCooperatives}
              cooperativesByWard={cooperativesByWard}
              COOPERATIVE_TYPES={COOPERATIVE_TYPES}
              COOPERATIVE_TYPES_EN={COOPERATIVE_TYPES_EN}
              COOPERATIVE_COLORS={COOPERATIVE_COLORS}
              statistics={statistics}
              popularCooperativeByWard={popularCooperativeByWard}
            />

            <h2
              id="challenges-and-opportunities"
              className="scroll-m-20 border-b pb-2 mt-12"
            >
              ‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§∞ ‡§Ö‡§µ‡§∏‡§∞‡§π‡§∞‡•Ç
            </h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-xl font-semibold">‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§π‡§∞‡•Ç</h3>
                <ul className="space-y-2 mt-4">
                  <li className="flex gap-2">
                    <span className="text-red-500">‚Ä¢</span>
                    <span>
                      <strong>‡§ï‡§Æ‡§ú‡•ã‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®:</strong> ‡§ï‡•á‡§π‡•Ä ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ
                      ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï‡•Ä‡§Ø ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ‡§ï‡•ã ‡§ï‡§Æ‡•Ä ‡§∞ ‡§Ö‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§∏‡•Å‡§∂‡§æ‡§∏‡§®
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">‚Ä¢</span>
                    <span>
                      <strong>‡§™‡•Ç‡§Å‡§ú‡•Ä‡§ï‡•ã ‡§Ö‡§≠‡§æ‡§µ:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§
                      ‡§™‡•Ç‡§Å‡§ú‡•Ä‡§ï‡•ã ‡§Ö‡§≠‡§æ‡§µ ‡§∞ ‡§≤‡§ó‡§æ‡§®‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§ï‡§Æ ‡§π‡•Å‡§®‡•Å
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">‚Ä¢</span>
                    <span>
                      <strong>‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§ï‡•ã ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó:</strong> ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§ï‡•ã
                      ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§Æ‡§æ ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§æ ‡§∞ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§∞‡§§‡§æ‡§ï‡•ã ‡§ï‡§Æ‡•Ä
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-red-500">‚Ä¢</span>
                    <span>
                      <strong>‡§®‡§ø‡§Ø‡§Æ‡§® ‡§∞ ‡§Ö‡§®‡•Å‡§ó‡§Æ‡§®:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã
                      ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡§® ‡§∞ ‡§Ö‡§®‡•Å‡§ó‡§Æ‡§®‡§ï‡•ã ‡§ï‡§Æ‡•Ä
                    </span>
                  </li>
                </ul>
              </div>

              <div>
                <h3 className="text-xl font-semibold">‡§Ö‡§µ‡§∏‡§∞‡§π‡§∞‡•Ç</h3>
                <ul className="space-y-2 mt-4">
                  <li className="flex gap-2">
                    <span className="text-green-500">‚Ä¢</span>
                    <span>
                      <strong>‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•á‡§µ‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞:</strong> ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§Æ‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§
                      ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∞ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡§æ‡§∞‡•ã‡§¨‡§æ‡§∞ ‡§™‡•ç‡§∞‡§µ‡§∞‡•ç‡§¶‡•ç‡§ß‡§®
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">‚Ä¢</span>
                    <span>
                      <strong>‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§Æ‡§æ ‡§≤‡§ó‡§æ‡§®‡•Ä:</strong> ‡§ï‡•É‡§∑‡§ø ‡§∞
                      ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§Æ‡•Ç‡§≤‡§ï ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§≤‡§ó‡§æ‡§®‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">‚Ä¢</span>
                    <span>
                      <strong>‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡§æ ‡§™‡§¶‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§∞
                      ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç‡§ï‡•ã ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-green-500">‚Ä¢</span>
                    <span>
                      <strong>‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§∏‡§û‡•ç‡§ú‡§æ‡§≤:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç ‡§¨‡•Ä‡§ö‡§ï‡•ã ‡§∏‡§π‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∞
                      ‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§∏‡§û‡•ç‡§ú‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£
                    </span>
                  </li>
                </ul>
              </div>
            </div>

            <h2
              id="conclusions-and-recommendations"
              className="scroll-m-20 border-b pb-2 mt-12"
            >
              ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏‡§π‡§∞‡•Ç
            </h2>

            <p>
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§¨‡§æ‡§ü ‡§®‡§ø‡§Æ‡•ç‡§®
              ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏‡§π‡§∞‡•Ç ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ó‡§∞‡§ø‡§è‡§ï‡§æ ‡§õ‡§®‡•ç:
            </p>

            <div className="pl-6 space-y-4">
              <div className="flex">
                <span className="font-bold mr-2">‡•ß.</span>
                <div>
                  <strong>‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§Ö‡§≠‡§ø‡§µ‡•É‡§¶‡•ç‡§ß‡§ø:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã
                  ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï‡•Ä‡§Ø ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§µ‡§ø‡§ß‡§ø‡§ï ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§Ö‡§≠‡§ø‡§µ‡•É‡§¶‡•ç‡§ß‡§ø‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§§‡§æ‡§≤‡§ø‡§Æ
                  ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§µ‡§ø‡§ß‡§ø‡§ï ‡§∏‡§π‡§Ø‡•ã‡§ó‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡•§
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">‡•®.</span>
                <div>
                  <strong>‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï
                  ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§ï‡•ã ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§∞ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•á‡§µ‡§æ‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§ó‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡§ø‡§§‡§æ
                  ‡§¨‡§¢‡§æ‡§â‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡•§
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">‡•©.</span>
                <div>
                  <strong>‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§≤‡§ó‡§æ‡§®‡•Ä:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§≤‡§æ‡§à
                  ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§Æ‡§æ ‡§≤‡§ó‡§æ‡§®‡•Ä ‡§ó‡§∞‡•ç‡§® ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§ó‡§∞‡•ç‡§®‡•á ‡§®‡•Ä‡§§‡§ø ‡§§‡§•‡§æ
                  ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§π‡§∞‡•Ç ‡§≤‡•ç‡§Ø‡§æ‡§â‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡•§
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">‡•™.</span>
                <div>
                  <strong>‡§∏‡§Æ‡§®‡•ç‡§µ‡§Ø ‡§∞ ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£:</strong> ‡§∏‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç ‡§¨‡•Ä‡§ö
                  ‡§∏‡§Æ‡§®‡•ç‡§µ‡§Ø ‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£‡§≤‡§æ‡§à ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡•§
                </div>
              </div>
              <div className="flex">
                <span className="font-bold mr-2">‡•´.</span>
                <div>
                  <strong>‡§µ‡§°‡§æ‡§ó‡§§ ‡§µ‡§ø‡§§‡§∞‡§£ ‡§∏‡§®‡•ç‡§§‡•Å‡§≤‡§®:</strong> ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§ï‡§Æ ‡§≠‡§è‡§ï‡§æ
                  ‡§µ‡§°‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§µ‡§∞‡•ç‡§¶‡•ç‡§ß‡§® ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§π‡§∞‡•Ç ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡•§
                </div>
              </div>
            </div>

            <p className="mt-6">
              ‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡•Ä ‡§™‡§∞‡§ø‡§ö‡§æ‡§≤‡§®‡§≤‡•á
              ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Ö‡§∞‡•ç‡§•‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§≤‡§æ‡§à ‡§¨‡§≤‡§ø‡§Ø‡•ã ‡§¨‡§®‡§æ‡§â‡§®, ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡•á‡§µ‡§æ‡§ï‡•ã ‡§™‡§π‡•Å‡§Å‡§ö ‡§¨‡§¢‡§æ‡§â‡§® ‡§∞
              ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§â‡§¶‡•ç‡§Ø‡§Æ‡§∂‡•Ä‡§≤‡§§‡§æ ‡§™‡•ç‡§∞‡§µ‡§∞‡•ç‡§¶‡•ç‡§ß‡§® ‡§ó‡§∞‡•ç‡§® ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§™‡•Å‡§∞‡•ç‚Äç‡§Ø‡§æ‡§â‡§®‡•á
              ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§õ‡•§ ‡§Ø‡§∏‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∏‡§∞‡§ï‡§æ‡§∞, ‡§®‡§ø‡§Ø‡§æ‡§Æ‡§ï ‡§®‡§ø‡§ï‡§æ‡§Ø ‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä
              ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç ‡§¨‡•Ä‡§ö‡§ï‡•ã ‡§∏‡§Æ‡§®‡•ç‡§µ‡§Ø ‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•ç‡§Ø‡§≤‡§æ‡§à ‡§•‡§™ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡•Ä ‡§¨‡§®‡§æ‡§â‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ‡•§
            </p>
          </div>
        </section>
      </div>
    </DocsLayout>
  );
}
