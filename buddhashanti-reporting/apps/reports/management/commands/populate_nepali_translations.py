"""
Management command to populate Nepali translations for report categories and sections
"""

from django.core.management.base import BaseCommand
from apps.reports.models import ReportCategory, ReportSection


class Command(BaseCommand):
    help = "Populate Nepali translations for report categories and sections"

    def handle(self, *args, **options):
        self.stdout.write(
            "üîÑ Populating Nepali translations for categories and sections..."
        )

        # Mapping of English category names to Nepali translations
        category_translations = {
            "Background": "‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø",
            "Objectives": "‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡§π‡§∞‡•Ç",
            "Legal and Policy Framework": "‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§∞ ‡§®‡•Ä‡§§‡§ø‡§ó‡§§ ‡§¢‡§æ‡§Å‡§ö‡§æ",
            "Preparation Phases": "‡§§‡§Ø‡§æ‡§∞‡•Ä ‡§ö‡§∞‡§£‡§π‡§∞‡•Ç",
            "Format, Tools and Procedure Preparation": "‡§¢‡§æ‡§Å‡§ö‡§æ, ‡§â‡§™‡§ï‡§∞‡§£ ‡§∞ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§§‡§Ø‡§æ‡§∞‡•Ä",
            "Preparation Workshop": "‡§§‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≤‡§æ",
            "Facilitator and Volunteer Selection and Orientation": "‡§∏‡§π‡§ú‡§ï‡§∞‡•ç‡§§‡§æ ‡§∞ ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§∏‡•á‡§µ‡§ï ‡§õ‡§®‡•ã‡§ü ‡§∞ ‡§Ö‡§≠‡§ø‡§Æ‡•Å‡§ñ‡•Ä‡§ï‡§∞‡§£",
            "Data Collection": "‡§°‡•á‡§ü‡§æ ‡§∏‡§Ç‡§ï‡§≤‡§®",
            "Data Processing and Analysis": "‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§∂‡•ã‡§ß‡§® ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
            "Draft Report Preparation": "‡§Æ‡§∏‡•ç‡§Ø‡•å‡§¶‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§µ‡•á‡§¶‡§® ‡§§‡§Ø‡§æ‡§∞‡•Ä",
            "Feedback Collection": "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§Ç‡§ï‡§≤‡§®",
            "Final Report Preparation": "‡§Ö‡§®‡•ç‡§§‡§ø‡§Æ ‡§™‡•ç‡§∞‡§§‡§ø‡§µ‡•á‡§¶‡§® ‡§§‡§Ø‡§æ‡§∞‡•Ä",
            "Scope of Status Report": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§™‡•ç‡§∞‡§§‡§ø‡§µ‡•á‡§¶‡§®‡§ï‡•ã ‡§¶‡§æ‡§Ø‡§∞‡§æ",
            "Demographics": "‡§ú‡§®‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä",
            "Economics": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
            "Social": "‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞",
            "Environment": "‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£",
            "Infrastructure": "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞",
            "Governance": "‡§∏‡•Å‡§∂‡§æ‡§∏‡§®",
            "Introduction": "‡§™‡§∞‡§ø‡§ö‡§Ø",
            "Methodology": "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§µ‡§ø‡§ß‡§ø",
            "Analysis": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
            "Conclusion": "‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑",
            "Recommendations": "‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏‡§π‡§∞‡•Ç",
        }

        # Mapping of English section titles to Nepali translations
        section_translations = {
            "Background": "‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø",
            "Population Overview": "‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡§ø‡§Ç‡§π‡§æ‡§µ‡§≤‡•ã‡§ï‡§®",
            "Age Distribution": "‡§â‡§Æ‡•á‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£",
            "Gender Statistics": "‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï",
            "Education Levels": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§ï‡•ã ‡§∏‡•ç‡§§‡§∞",
            "Economic Activities": "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§π‡§∞‡•Ç",
            "Agriculture": "‡§ï‡•É‡§∑‡§ø",
            "Industry": "‡§â‡§¶‡•ç‡§Ø‡•ã‡§ó",
            "Services": "‡§∏‡•á‡§µ‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞",
            "Employment": "‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞‡•Ä",
            "Income Distribution": "‡§Ü‡§Ø ‡§µ‡§ø‡§§‡§∞‡§£",
            "Poverty Statistics": "‡§ó‡§∞‡§ø‡§¨‡•Ä ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï",
            "Health Services": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ‡§π‡§∞‡•Ç",
            "Education System": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
            "Social Welfare": "‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£",
            "Cultural Heritage": "‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡§Æ‡•ç‡§™‡§¶‡§æ",
            "Environmental Status": "‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
            "Natural Resources": "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§‡§π‡§∞‡•Ç",
            "Biodiversity": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ",
            "Climate": "‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å",
            "Pollution": "‡§™‡•ç‡§∞‡§¶‡•Ç‡§∑‡§£",
            "Transportation": "‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§",
            "Communication": "‡§∏‡§û‡•ç‡§ö‡§æ‡§∞",
            "Energy": "‡§ä‡§∞‡•ç‡§ú‡§æ",
            "Water Supply": "‡§ñ‡§æ‡§®‡•á‡§™‡§æ‡§®‡•Ä ‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø",
            "Sanitation": "‡§∏‡§∞‡§∏‡§´‡§æ‡§à",
            "Local Government": "‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∏‡§∞‡§ï‡§æ‡§∞",
            "Administrative Structure": "‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§®‡§ø‡§ï ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ",
            "Budget and Finance": "‡§¨‡§ú‡•á‡§ü ‡§∞ ‡§µ‡§ø‡§§‡•ç‡§§",
            "Service Delivery": "‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§µ‡§æ‡§π",
            "Citizen Participation": "‡§®‡§æ‡§ó‡§∞‡§ø‡§ï ‡§∏‡§π‡§≠‡§æ‡§ó‡§ø‡§§‡§æ",
        }

        # Update categories
        categories_updated = 0
        for category in ReportCategory.objects.all():
            if category.name in category_translations:
                nepali_name = category_translations[category.name]
                if not category.name_nepali or category.name_nepali != nepali_name:
                    category.name_nepali = nepali_name
                    category.save()
                    categories_updated += 1
                    self.stdout.write(
                        f"‚úÖ Updated category: {category.name} ‚Üí {nepali_name}"
                    )

        # Update sections
        sections_updated = 0
        for section in ReportSection.objects.all():
            if section.title in section_translations:
                nepali_title = section_translations[section.title]
                if not section.title_nepali or section.title_nepali != nepali_title:
                    section.title_nepali = nepali_title
                    section.save()
                    sections_updated += 1
                    self.stdout.write(
                        f"‚úÖ Updated section: {section.title} ‚Üí {nepali_title}"
                    )

        # Create sample categories if none exist
        if not ReportCategory.objects.exists():
            self.stdout.write("üìù Creating sample categories...")
            sample_categories = [
                (
                    "Introduction",
                    "‡§™‡§∞‡§ø‡§ö‡§Ø",
                    "‡§™‡•ã‡§ñ‡§∞‡§æ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡§∞‡§ø‡§ö‡§Ø ‡§∞ ‡§Ø‡§∏ ‡§™‡•ç‡§∞‡§§‡§ø‡§µ‡•á‡§¶‡§®‡§ï‡•ã ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø",
                    "fas fa-home",
                ),
                (
                    "Demographics",
                    "‡§ú‡§®‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä",
                    "‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ, ‡§â‡§Æ‡•á‡§∞, ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§∞ ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï‡§π‡§∞‡•Ç",
                    "fas fa-users",
                ),
                (
                    "Economics",
                    "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
                    "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø, ‡§ï‡•É‡§∑‡§ø, ‡§â‡§¶‡•ç‡§Ø‡•ã‡§ó ‡§∞ ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
                    "fas fa-chart-line",
                ),
                (
                    "Social",
                    "‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞",
                    "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø, ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§π‡§∞‡•Ç",
                    "fas fa-heart",
                ),
                (
                    "Environment",
                    "‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£",
                    "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§, ‡§ú‡•à‡§µ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§∞ ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£",
                    "fas fa-leaf",
                ),
                (
                    "Infrastructure",
                    "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞",
                    "‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§, ‡§∏‡§û‡•ç‡§ö‡§æ‡§∞, ‡§ä‡§∞‡•ç‡§ú‡§æ ‡§∞ ‡§ñ‡§æ‡§®‡•á‡§™‡§æ‡§®‡•Ä‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
                    "fas fa-building",
                ),
                (
                    "Governance",
                    "‡§∏‡•Å‡§∂‡§æ‡§∏‡§®",
                    "‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∂‡§æ‡§∏‡§®, ‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§® ‡§∞ ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï ‡§∏‡•á‡§µ‡§æ‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ",
                    "fas fa-gavel",
                ),
            ]

            for i, (name_en, name_np, desc_np, icon) in enumerate(sample_categories, 1):
                category = ReportCategory.objects.create(
                    name=name_en,
                    name_nepali=name_np,
                    description=f"Information about {name_en}",
                    description_nepali=desc_np,
                    category_number=str(i),
                    order=i,
                    icon=icon,
                    is_active=True,
                )
                categories_updated += 1
                self.stdout.write(f"‚úÖ Created category: {name_en} ‚Üí {name_np}")

        self.stdout.write(
            self.style.SUCCESS(
                f"\nüéâ Translation update completed!\n"
                f"üìä Categories updated: {categories_updated}\n"
                f"üìù Sections updated: {sections_updated}\n"
                f"\nNow the table of contents should display Nepali titles!"
            )
        )
