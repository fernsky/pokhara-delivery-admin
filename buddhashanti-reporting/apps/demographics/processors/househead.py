"""
Househead Demographics Processor

Handles househead demographic data processing, chart generation, and report formatting.
"""

import subprocess
from .base import BaseDemographicsProcessor, BaseReportFormatter
from ..models import WardWiseHouseheadGender, GenderChoice
from ..utils.svg_chart_generator import DEFAULT_COLORS
from apps.reports.utils.nepali_numbers import (
    format_nepali_number,
    format_nepali_percentage,
)
from apps.chart_management.processors import SimpleChartProcessor


class HouseheadProcessor(BaseDemographicsProcessor, SimpleChartProcessor):
    """Processor for househead demographics"""

    def __init__(self):
        super().__init__()
        SimpleChartProcessor.__init__(self)
        # Customize chart dimensions for househead
        self.pie_chart_width = 800
        self.pie_chart_height = 450
        self.bar_chart_width = 800
        self.bar_chart_height = 500
        self.chart_radius = 130
        # Set househead-specific colors
        self.chart_generator.colors = {
            "MALE": "#1f77b4",  # Blue
            "FEMALE": "#ff7f0e",  # Orange
            "OTHER": "#2ca02c",  # Green
        }

    def get_chart_key(self):
        """Return unique chart key for this processor"""
        return "demographics_househead"

    def get_section_title(self):
        return "‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£"

    def get_section_number(self):
        return "‡•©.‡•≠"

    def get_data(self):
        """Get househead population data - both municipality-wide and ward-wise"""
        # Municipality-wide summary
        househead_data = {}

        # Initialize all genders
        for choice in GenderChoice.choices:
            househead_data[choice[0]] = {
                "population": 0,
                "percentage": 0.0,
                "name_nepali": choice[1],
            }

        # Ward-wise data for bar chart and detailed table
        ward_data = {}
        for ward_num in range(1, 9):  # Wards 1-8
            ward_data[ward_num] = {
                "ward_name": f"‡§µ‡§°‡§æ ‡§®‡§Ç. {ward_num}",
                "demographics": {},
            }
            # Initialize genders for each ward
            for choice in GenderChoice.choices:
                ward_data[ward_num]["demographics"][choice[0]] = {
                    "population": 0,
                    "name_nepali": choice[1],
                }

        # Get actual data from database
        total_population = 0
        for househead_obj in WardWiseHouseheadGender.objects.all():
            gender = househead_obj.gender
            ward_num = househead_obj.ward_number
            population = househead_obj.population

            # Add to municipality-wide totals
            if gender in househead_data:
                househead_data[gender]["population"] += population
                total_population += population

            # Add to ward-wise data
            if ward_num in ward_data and gender in ward_data[ward_num]["demographics"]:
                ward_data[ward_num]["demographics"][gender]["population"] = population

        # Calculate percentages for municipality-wide data
        if total_population > 0:
            for gender, data in househead_data.items():
                data["percentage"] = (data["population"] / total_population) * 100

        # Calculate ward totals and percentages
        for ward_num, ward_info in ward_data.items():
            ward_total = sum(
                demo["population"] for demo in ward_info["demographics"].values()
            )
            ward_info["total_population"] = ward_total

            # Calculate percentages within each ward
            if ward_total > 0:
                for gender, demo in ward_info["demographics"].items():
                    demo["percentage"] = (
                        (demo["population"] / ward_total) * 100 if ward_total > 0 else 0
                    )

        return {
            "municipality_data": househead_data,
            "ward_data": ward_data,
            "total_population": total_population,
        }

    def generate_report_content(self, data):
        """Generate househead-specific report content"""
        formatter = self.HouseheadReportFormatter()
        return formatter.generate_formal_report(
            data["municipality_data"], data["ward_data"], data["total_population"]
        )

    def generate_chart_svg(self, data, chart_type="bar"):
        """Generate househead chart SVG using SVGChartGenerator"""
        if chart_type == "pie":
            return self.chart_generator.generate_pie_chart_svg(
                data["municipality_data"],
                include_title=False,
                title_nepali="‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£",
                title_english="Household Distribution by Head Gender",
            )
        elif chart_type == "bar":
            return self.chart_generator.generate_bar_chart_svg(
                data["ward_data"],
                include_title=False,
                title_nepali="‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£",
                title_english="Head Gender Distribution by Ward",
            )
        return None

    def generate_and_track_charts(self, data):
        """Generate charts only if they don't exist and track them using simplified chart management"""
        charts = {}

        # Check if pie chart file exists first, then use chart management
        pie_path = self.static_charts_dir / "househead_pie_chart.svg"
        pie_png_path = self.static_charts_dir / "househead_pie_chart.png"

        if not pie_path.exists() and not pie_png_path.exists():
            print("üé® Generating househead pie chart (file doesn't exist)...")
            pie_svg = self.generate_chart_svg(data, chart_type="pie")
            if pie_svg:
                with open(pie_path, "w", encoding="utf-8") as f:
                    f.write(pie_svg)

                pie_file_path = "househead_pie_chart.svg"
                print(f"‚úì Generated househead pie chart: {pie_path}")

                # Track with simplified chart management system
                pie_url = self.track_chart_file(
                    chart_type="pie",
                    file_path=pie_file_path,
                    title="‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£",
                )
                if pie_url:
                    charts["pie_chart_url"] = pie_url
                    charts["pie_chart_svg"] = pie_file_path
                    print(f"‚úì Pie chart URL: {pie_url}")

                # Try to convert to PNG for better quality
                try:
                    subprocess.run(
                        [
                            "inkscape",
                            "--export-filename",
                            str(pie_png_path),
                            "--export-dpi=600",
                            str(pie_path),
                        ],
                        check=True,
                        timeout=30,
                    )
                    if pie_png_path.exists():
                        png_file_path = "househead_pie_chart.png"
                        # Update tracking with PNG version
                        png_url = self.track_chart_file(
                            chart_type="pie",
                            file_path=png_file_path,
                            title="‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£",
                        )
                        if png_url:
                            charts["pie_chart_url"] = png_url
                            charts["pie_chart_png"] = png_file_path
                            print(f"‚úì Updated with PNG version: {png_url}")
                except:
                    pass  # Use SVG fallback
            else:
                print("‚ùå Failed to generate househead pie chart")
        else:
            # Use existing pie chart
            if pie_png_path.exists():
                charts["pie_chart_png"] = "househead_pie_chart.png"
            if pie_path.exists():
                charts["pie_chart_svg"] = "househead_pie_chart.svg"
            pie_url = self.get_chart_url("pie")
            if pie_url:
                charts["pie_chart_url"] = pie_url
            print("‚úì Using existing househead pie chart")

        # Check if bar chart file exists first, then use chart management
        bar_path = self.static_charts_dir / "househead_bar_chart.svg"
        bar_png_path = self.static_charts_dir / "househead_bar_chart.png"

        if not bar_path.exists() and not bar_png_path.exists():
            print("üé® Generating househead bar chart (file doesn't exist)...")
            bar_svg = self.generate_chart_svg(data, chart_type="bar")
            if bar_svg:
                with open(bar_path, "w", encoding="utf-8") as f:
                    f.write(bar_svg)

                bar_file_path = "househead_bar_chart.svg"
                print(f"‚úì Generated househead bar chart: {bar_path}")

                # Track with simplified chart management system
                bar_url = self.track_chart_file(
                    chart_type="bar",
                    file_path=bar_file_path,
                    title="‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£",
                )
                if bar_url:
                    charts["bar_chart_url"] = bar_url
                    charts["bar_chart_svg"] = bar_file_path
                    print(f"‚úì Bar chart URL: {bar_url}")

                # Try to convert to PNG for better quality
                try:
                    subprocess.run(
                        [
                            "inkscape",
                            "--export-filename",
                            str(bar_png_path),
                            "--export-dpi=600",
                            str(bar_path),
                        ],
                        check=True,
                        timeout=30,
                    )
                    if bar_png_path.exists():
                        png_file_path = "househead_bar_chart.png"
                        # Update tracking with PNG version
                        png_url = self.track_chart_file(
                            chart_type="bar",
                            file_path=png_file_path,
                            title="‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£",
                        )
                        if png_url:
                            charts["bar_chart_url"] = png_url
                            charts["bar_chart_png"] = png_file_path
                            print(f"‚úì Updated with PNG version: {png_url}")
                except:
                    pass  # Use SVG fallback
            else:
                print("‚ùå Failed to generate househead bar chart")
        else:
            # Use existing bar chart
            if bar_png_path.exists():
                charts["bar_chart_png"] = "househead_bar_chart.png"
            if bar_path.exists():
                charts["bar_chart_svg"] = "househead_bar_chart.svg"
            bar_url = self.get_chart_url("bar")
            if bar_url:
                charts["bar_chart_url"] = bar_url
            print("‚úì Using existing househead bar chart")

        return charts

    def generate_and_save_charts(self, data):
        """Legacy method - calls new chart management method"""
        return self.generate_and_track_charts(data)

        return charts_info

    class HouseheadReportFormatter(BaseReportFormatter):
        """Househead-specific report formatter"""

        def generate_formal_report(self, househead_data, ward_data, total_population):
            """Generate househead formal report content"""

            # Find major genders
            major_genders = []
            for gender_type, data in househead_data.items():
                if data["population"] > 0:
                    major_genders.append(
                        (data["name_nepali"], data["population"], data["percentage"])
                    )

            major_genders.sort(key=lambda x: x[1], reverse=True)

            # Build coherent analysis
            content = []

            # Introduction
            nepali_total = format_nepali_number(total_population)
            content.append(
                f"""{self.municipality_name}‡§Æ‡§æ ‡§ï‡•Å‡§≤ {nepali_total} ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç ‡§õ‡§®‡•ç ‡•§ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§Ø‡•Ä ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ó‡§∞‡•ç‡§¶‡§æ ‡§∞‡•ã‡§ö‡§ï ‡§§‡§•‡•ç‡§Ø‡§π‡§∞‡•Ç ‡§¶‡•á‡§ñ‡§ø‡§®‡•ç‡§õ‡§®‡•ç ‡•§"""
            )

            # Major genders analysis
            if major_genders:
                main_gender = major_genders[0]
                main_percentage = format_nepali_percentage(main_gender[2])
                main_population = format_nepali_number(main_gender[1])

                content.append(
                    f"""‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§π‡§ï‡§Æ‡§æ {main_gender[0]} ‡§Æ‡•Ç‡§≤‡•Ä ‡§≠‡§è‡§ï‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä ‡§õ ‡§ú‡•Å‡§® ‡§ï‡•Å‡§≤ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§ï‡•ã {main_percentage} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ({main_population} ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞) ‡§π‡•ã ‡•§"""
                )

                if len(major_genders) > 1:
                    second_gender = major_genders[1]
                    second_percentage = format_nepali_percentage(second_gender[2])
                    second_population = format_nepali_number(second_gender[1])

                    content.append(
                        f"""{second_gender[0]} ‡§Æ‡•Ç‡§≤‡•Ä ‡§≠‡§è‡§ï‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ {second_percentage} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ({second_population} ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞) ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ ‡•§"""
                    )

            # Ward-wise analysis
            content.append(
                """‡§µ‡§°‡§æ‡§ó‡§§ ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§π‡•á‡§∞‡•ç‡§¶‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§µ‡§ø‡§§‡§∞‡§£‡§Æ‡§æ ‡§ï‡•á‡§π‡•Ä ‡§≠‡§ø‡§®‡•ç‡§®‡§§‡§æ‡§π‡§∞‡•Ç ‡§¶‡•á‡§ñ‡§ø‡§®‡•ç‡§õ‡§®‡•ç ‡•§"""
            )

            # Find ward with highest female head percentage
            highest_female_ward = None
            highest_female_percentage = 0
            for ward_num, ward_info in ward_data.items():
                if "FEMALE" in ward_info["demographics"]:
                    if "percentage" in ward_info["demographics"]["FEMALE"]:
                        female_percentage = ward_info["demographics"]["FEMALE"][
                            "percentage"
                        ]
                        if female_percentage > highest_female_percentage:
                            highest_female_percentage = female_percentage
                            highest_female_ward = ward_num

            if highest_female_ward:
                ward_nepali = format_nepali_number(highest_female_ward)
                female_percentage_nepali = format_nepali_percentage(
                    highest_female_percentage
                )
                content.append(
                    f"""‡§µ‡§°‡§æ ‡§®‡§Ç. {ward_nepali} ‡§Æ‡§æ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§¨‡§¢‡•Ä {female_percentage_nepali} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ ‡§ú‡•Å‡§® ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡§∂‡§ï‡•ç‡§§‡§ø‡§ï‡§∞‡§£‡§ï‡•ã ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•ã ‡•§"""
                )

            # Constitutional context
            content.append(
                """‡§®‡•á‡§™‡§æ‡§≤‡§ï‡•ã ‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§® ‡•®‡•¶‡•≠‡•® ‡§≤‡•á ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ‡§ï‡•ã ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§®‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ó‡§∞‡•á‡§ï‡•ã ‡§õ ‡•§ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§µ‡§æ‡§∞‡•Ä ‡§™‡•Å‡§∞‡•Å‡§∑ ‡§∞ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§¶‡•Å‡§µ‡•à‡§≤‡•á ‡§∏‡§Æ‡§æ‡§® ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§µ‡§π‡§® ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§õ‡§®‡•ç ‡•§ ‡§π‡§æ‡§≤‡§ï‡§æ ‡§µ‡§∞‡•ç‡§∑‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§Æ‡§æ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§≠‡§è‡§ï‡•ã ‡§õ ‡§ú‡•Å‡§® ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡§ï‡•ã ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•ã ‡•§"""
            )

            # Diversity analysis
            active_genders = len(
                [d for d in househead_data.values() if d["population"] > 0]
            )
            if active_genders > 1:
                content.append(
                    f"""‡§Ø‡§∏ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡§Æ‡§æ ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§∞‡§π‡•á‡§ï‡•ã ‡§õ ‡§ú‡§∏‡§≤‡•á ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ‡§ï‡•ã ‡§¶‡§ø‡§∂‡§æ‡§Æ‡§æ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§≠‡§è‡§ï‡•ã ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§ó‡§∞‡•ç‡§õ ‡•§ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§ï‡•ã ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ‡§Æ‡§æ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§≤‡§ø‡§ô‡•ç‡§ó‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡§π‡§≠‡§æ‡§ó‡§ø‡§§‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ï ‡§π‡•ã ‡•§"""
                )

            # Social development implications
            content.append(
                """‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§ï‡•ã ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø‡§Æ‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•Å‡§®‡•ç‡§õ ‡•§ ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ‡§ï‡•ã ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§®‡•ç‡§§ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§¨‡•à ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§∏‡§Æ‡§æ‡§® ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∞ ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§µ‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ ‡•§ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§≤‡•á ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§π‡§∞‡•Ç‡§ï‡•ã ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§∞ ‡§∏‡§∂‡§ï‡•ç‡§§‡§ø‡§ï‡§∞‡§£‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§π‡§∞‡•Ç ‡§∏‡§û‡•ç‡§ö‡§æ‡§≤‡§® ‡§ó‡§∞‡•ç‡§¶‡•à ‡§Ü‡§è‡§ï‡•ã ‡§õ ‡•§"""
            )

            # Economic empowerment
            content.append(
                """‡§Æ‡§π‡§ø‡§≤‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§π‡§∞‡•Ç‡§ï‡•ã ‡§¨‡§¢‡•ç‡§¶‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§≤‡•á ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§∂‡§ï‡•ç‡§§‡§ø‡§ï‡§∞‡§£‡§Æ‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ñ‡•á‡§≤‡•á‡§ï‡•ã ‡§õ ‡•§ ‡§â‡§®‡•Ä‡§π‡§∞‡•Ç‡§≤‡•á ‡§ò‡§∞‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§ï‡•ã ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®, ‡§¨‡§ö‡§§ ‡§∞ ‡§≤‡§ó‡§æ‡§®‡•Ä‡§Æ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡•Ä ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ó‡§∞‡•á‡§ï‡§æ ‡§õ‡§®‡•ç ‡•§ ‡§Ø‡§∏‡§≤‡•á ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏‡§Æ‡§æ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§™‡§æ‡§∞‡•á‡§ï‡•ã ‡§õ ‡•§"""
            )

            # Future implications
            content.append(
                """‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§µ‡§ø‡§§‡§∞‡§£‡§≤‡•á ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∞ ‡§®‡•Ä‡§§‡§ø ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£‡§Æ‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ñ‡•á‡§≤‡•ç‡§õ ‡•§ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§Æ‡§æ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø‡§≤‡•á ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡§∂‡§ï‡•ç‡§§‡§ø‡§ï‡§∞‡§£ ‡§∞ ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§Æ‡§æ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§™‡§æ‡§∞‡•ç‡§õ ‡•§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§Æ‡§æ ‡§•‡§™ ‡§∏‡§Æ‡§æ‡§®‡•Å‡§™‡§æ‡§§‡§ø‡§ï ‡§µ‡§ø‡§§‡§∞‡§£‡§ï‡•ã ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡§ø‡§®‡•ç‡§õ ‡§ú‡•Å‡§® ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ï‡•ã ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§µ‡§ø‡§ï‡§æ‡§∏‡§Æ‡§æ ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§™‡•Å‡§∞‡•ç‡§Ø‡§æ‡§â‡§®‡•á‡§õ ‡•§"""
            )

            return " ".join(content)

        def generate_harmony_conclusion(self):
            """Generate harmony conclusion text"""
            return """‡§ò‡§∞‡§Æ‡•Ç‡§≤‡•Ä‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ‡§≤‡•á ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§Æ‡§æ ‡§≤‡§ø‡§ô‡•ç‡§ó‡•Ä‡§Ø ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ‡§ï‡•ã ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•á‡§ï‡•ã ‡§õ ‡•§ ‡§Ø‡§∏‡§≤‡•á ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§∞ ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ‡§ï‡•ã ‡§¶‡§ø‡§∂‡§æ‡§Æ‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§ó‡§æ‡§°‡§ø ‡§¨‡§¢‡•á‡§ï‡•ã ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§ó‡§∞‡•ç‡§õ ‡•§"""
