"""
Management command to create ward settlement data
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.demographics.models import WardSettlement
import uuid


class Command(BaseCommand):
    help = (
        "Create ward settlement data based on actual municipality ward settlement data"
    )

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="Clear existing data before creating new data",
        )

    def handle(self, *args, **options):
        if options["clear"]:
            self.stdout.write(
                self.style.WARNING("Clearing existing ward settlement data...")
            )
            WardSettlement.objects.all().delete()

        self.stdout.write(
            "Creating ward settlement data based on actual municipality data..."
        )

        # Ward settlement data as provided (updated for all 8 wards, Unicode Nepali values)
        ward_settlement_data = [
            {
                "ward_number": 1,
                "settlement_areas": [
                    "‡§Æ‡§≤‡§Æ‡§≤‡§æ",
                    "‡§¨‡§¢‡§π‡§∞‡§æ",
                    "‡§ú‡•á‡§†‡§æ‡§®‡§ó‡§æ‡§â‡§Å",
                    "‡§ö‡§ø‡§∏‡§æ‡§™‡§æ‡§®‡•Ä",
                    "‡§ú‡•Å‡§∞‡•å‡§®‡•Ä",
                    "‡§™‡§§‡•ç‡§∞‡§ø‡§ô‡•ç‡§ó‡§æ",
                    "‡§¨‡§®‡§¨‡§æ‡§∞‡•Ä",
                    "‡§¨‡§®‡§ò‡•Å‡§∏‡§∞‡•Ä",
                    "‡§ï‡§æ‡§≤‡§æ‡§ï‡§æ‡§ü‡•á",
                    "‡§∞‡§ô‡•ç‡§ó‡§∏‡§ø‡§ô‡•ç‡§ó",
                    "‡§ï‡§≤‡•ã‡§®‡•Ä",
                    "‡§ú‡•Å‡§∞‡•à‡§®‡•Ä",
                    "‡§ß‡§æ‡§®‡§ñ‡•à‡§≤‡§æ",
                    "‡§¨‡•à‡§π‡§∞‡§π‡§æ",
                ],
            },
            {
                "ward_number": 2,
                "settlement_areas": [
                    "‡§™‡§ö‡§π‡§ø‡§Ø‡§æ",
                    "‡§Æ‡§π‡§¶‡•á‡§µ‡§æ",
                    "‡§ï‡•ã‡§†‡§∞‡•Ä",
                    "‡§¨‡§æ‡§ò‡§Æ‡§æ‡§∞‡•Å‡§µ‡§æ",
                    "‡§°‡§æ‡§°‡§æ‡§ü‡•ã‡§≤",
                    "‡§ò‡•Å‡§∏‡•ç‡§∞‡§æ",
                    "‡§ö‡§ø‡§Æ‡§ö‡§ø‡§Æ‡•á",
                    "‡§¨‡§æ‡§ò‡§Æ‡§æ‡§∞‡§µ‡§æ",
                    "‡§ö‡§ø‡§Æ‡§ö‡§ø‡§Æ‡•á",
                    "‡§™‡§æ‡§ö‡§π‡§ø‡§Ø‡§æ",
                ],
            },
            {
                "ward_number": 3,
                "settlement_areas": [
                    "‡§ó‡•ã‡§¨‡§∞‡§°‡§ø‡§π‡§æ",
                    "‡§ñ‡•à‡§∞‡•á‡§®‡•Ä",
                    "‡§ß‡•à‡§∞‡•á‡§®‡•Ä",
                    "‡§∞‡§§‡•ç‡§®‡§™‡•Å‡§∞",
                    "‡§∏‡•Å‡§™‡•à‡§≤‡§æ",
                    "‡§Æ‡§æ‡§ß‡§™‡•Å‡§∞",
                    "‡§ñ‡•à‡§∞‡§æ",
                    "‡§ó‡•ã‡§µ‡§∞‡§°‡§ø‡§π‡§æ",
                ],
            },
            {
                "ward_number": 4,
                "settlement_areas": [
                    "‡§Ö‡§ú‡§™‡•ã‡§ñ‡§∞‡§æ",
                    "‡§™‡§∞‡•ç‡§∏‡•á‡§®‡•Ä",
                    "‡§™‡§∞‡•ç‡§∏‡§æ",
                    "‡§ï‡§§‡§ø‡§Ø‡§æ‡§® ‡§ó‡§æ‡§â‡§Å",
                    "‡§∞‡§æ‡§Æ‡§®‡§ó‡§∞",
                    "‡§™‡§∞‡§∏‡•ç‡§™‡•Å‡§∞",
                    "‡§®‡§Ø‡§æ‡§Å ‡§¨‡§∏‡•ç‡§§‡•Ä",
                    "‡§ñ‡§¶‡§ï‡§™‡•Å‡§∞",
                    "‡§â‡§†‡•à‡§Ø‡§æ",
                    "‡§Æ‡§ó‡•ç‡§∞‡•ã‡§§‡§æ",
                    "‡§π‡§¶‡•à‡§Ø‡§æ",
                    "‡§ñ‡§°‡§ï‡§™‡•Å‡§∞",
                    "‡§π‡§°‡•à‡§Ø‡§æ",
                    "‡§õ‡•Å‡§ü‡§ï‡•Ä ‡§™‡§∞‡•ç‡§∏‡•á‡§®‡•Ä",
                    "‡§¨‡•Å‡§ü‡•á‡§®‡§ø",
                    "‡§ò‡•Å‡§∏‡•Å‡§∞‡§™‡•Å‡§∞‡§µ‡§æ",
                    "‡§™‡§∞‡•ç‡§∏‡•á‡§®‡•Ä",
                    "‡§∏‡•Å‡§§‡§æ‡§π‡§ø‡§Ø‡§æ",
                ],
            },
            {
                "ward_number": 5,
                "settlement_areas": [
                    "‡§¨‡§æ‡§ï‡•Ä",
                    "‡§ö‡•à‡§®‡§™‡•Å‡§∞",
                    "‡§ß‡§∞‡•ç‡§Æ‡§™‡•Å‡§∞",
                    "‡§Æ‡§ò‡§∞‡•Ä",
                    "‡§™‡§∞‡•ç‡§®‡§æ‡§π‡§æ",
                    "‡§™‡§∞‡•ç‡§∏‡§ø‡§Ø‡§æ",
                    "‡§ñ‡§ú‡§∞‡•å‡§ü‡§æ",
                    "‡§∏‡•Å‡§®‡§™‡•Å‡§∞‡•Å‡§µ‡§æ",
                    "‡§ï‡§ï‡•ç‡§∞‡•ç‡§π‡§µ‡§æ",
                    "‡§¨‡§æ‡§Å‡§ï‡•Ä",
                    "‡§∏‡§ø‡§Æ‡§≤‡§§‡§æ‡§∞‡§æ",
                    "‡§≤‡•ã‡§ñ‡§∞ ‡§™‡•Å‡§∞",
                    "‡§†‡•Å‡§≤‡•Ä‡§ö‡•å‡§∞",
                    "‡§≠‡§µ‡§æ‡§®‡•Ä ‡§¨‡§∏‡•ç‡§§‡•Ä",
                    "‡§≤‡§æ‡§≤‡§™‡•Å‡§∞",
                    "‡§≤‡•ã‡§ñ‡§æ‡§∞‡§™‡•Å‡§∞",
                    "‡§¨‡§æ‡§ï‡§ø",
                    "‡§ú‡§Æ‡•Å‡§®‡§ø‡§¨‡§æ‡§∏",
                    "‡§Æ‡§ò‡§∞",
                    "‡§§‡§ï‡§ø‡§Ø‡§æ ‡§™‡•Å‡§∞",
                    "‡§µ‡§æ‡§Å‡§ï‡•Ä",
                ],
            },
            {
                "ward_number": 6,
                "settlement_areas": [
                    "‡§Æ‡§®‡§ø‡§ï‡§æ‡§™‡•Å‡§∞",
                    "‡§™‡•ã‡§ñ‡§∞‡§æ",
                    "‡§¨‡§æ‡§≤‡§æ‡§™‡•Å‡§∞",
                    "‡§ñ‡§¨‡§∞‡•Ä",
                    "‡§π‡§æ‡§∏‡•Ä‡§™‡•Å‡§∞",
                    "‡§¨‡§æ‡§≤‡§æ‡§ñ‡•Å‡§ü‡•Ä",
                    "‡§Æ‡§¶‡§™‡•Å‡§∞",
                    "‡§∏‡§ø‡§¨‡§ø‡§∞",
                    "‡§Ü‡§Å‡§ü‡•Ä‡§™‡§æ‡§ï‡§∞",
                    "‡§¨‡§®‡§ï‡§ü‡•ç‡§ü‡•Ä",
                    "‡§ï‡•Å‡§Æ‡§æ‡§≤ ‡§ü‡•ã‡§≤",
                    "‡§Ö‡§§‡§∞‡§¨‡•á‡§¶‡•Å‡§µ‡§æ",
                    "‡§∞‡§æ‡§Æ‡§™‡•Å‡§∞",
                    "‡§Ü‡§ü‡•Ä‡§™‡§æ‡§ï‡§∞",
                    "‡§™‡§ø‡§™‡§≤ ‡§¶‡§æ‡§∞‡§æ",
                    "‡§ù‡§ø‡§Ç‡§ó‡§æ",
                    "‡§™‡§∞‡•ç‡§®‡§æ‡§π‡§æ ‡§ó‡•å‡§°‡•Ä",
                    "‡§â‡§™‡•ç‡§≤‡•ç‡§®‡•ã ‡§Æ‡§¶‡§™‡•Å‡§∞",
                    "‡§®‡§Ø‡§æ‡§Å ‡§¨‡§∏‡•ç‡§§‡•Ä",
                    "‡§™‡§∞‡•ç‡§®‡§æ‡§π‡§æ ‡§ó‡•å‡§°‡•Ä",
                    "‡§•‡§æ‡§®‡§¶‡•á‡§â‡§ñ‡§∞",
                    "‡§∏‡§æ‡§≤‡§ò‡§æ‡§∞‡•Ä",
                    "‡§•‡§æ‡§®‡•ç‡§¶‡•á‡§â‡§ñ‡§∞",
                    "‡§ò‡•ã‡§∞‡§æ‡§π‡§æ",
                    "‡§∏‡§æ‡§≤‡§ò‡§æ‡§∞‡•Ä",
                ],
            },
            {
                "ward_number": 7,
                "settlement_areas": [
                    "‡§ò‡•ã‡§∞‡§æ‡§π‡§æ",
                    "‡§Æ‡§æ‡§®‡§™‡•Å‡§∞",
                    "‡§ö‡§®‡•ç‡§¶‡§®‡§™‡•Å‡§∞",
                    "‡§∂‡§æ‡§®‡•ç‡§§‡§ø‡§™‡•Å‡§∞",
                    "‡§≠‡•ã‡§ú‡§™‡•Å‡§∞",
                    "‡§≤‡§ï‡•ç‡§∑‡§ø‡§£‡§™‡•Å‡§∞",
                    "‡§ù‡§æ‡§∞‡§¨‡•à‡§∞‡§æ",
                    "‡§∏‡•á‡§Æ‡§∞‡•Ä",
                    "‡§¨‡§ø‡§ú‡§Ø‡§™‡•Å‡§∞",
                    "‡§Æ‡•ã‡§§‡•Ä‡§™‡•Å‡§∞",
                ],
            },
            {
                "ward_number": 8,
                "settlement_areas": [
                    "‡§ï‡•ã‡§á‡§≤‡§æ‡§¨‡§æ‡§∏",
                    "‡§Æ‡•Å‡§∏‡§ø‡§®‡§æ‡§ï‡§æ",
                    "‡§¶‡§æ‡§¶‡§æ ‡§ó‡§æ‡§â‡§Å",
                    "‡§ï‡•ã‡§á‡§≤‡§æ‡§¨‡§æ‡§∏ ‡§¨‡§ú‡§æ‡§∞",
                ],
            },
        ]

        existing_count = WardSettlement.objects.count()
        if existing_count > 0 and not options["clear"]:
            self.stdout.write(
                self.style.WARNING(
                    f"Found {existing_count} existing records. Use --clear to replace them."
                )
            )
            return

        created_count = 0
        updated_count = 0
        total_settlements = 0

        with transaction.atomic():
            for data in ward_settlement_data:
                obj, created = WardSettlement.objects.get_or_create(
                    ward_number=data["ward_number"],
                    defaults={
                        "settlement_areas": data["settlement_areas"],
                    },
                )

                if created:
                    created_count += 1
                    self.stdout.write(
                        f"‚úì Created Ward {data['ward_number']} with {len(data['settlement_areas'])} settlements"
                    )
                else:
                    # Update existing record
                    obj.settlement_areas = data["settlement_areas"]
                    obj.save()
                    updated_count += 1
                    self.stdout.write(
                        f"‚Üª Updated Ward {data['ward_number']} with {len(data['settlement_areas'])} settlements"
                    )

                total_settlements += len(data["settlement_areas"])

        total_records = WardSettlement.objects.count()

        self.stdout.write(
            self.style.SUCCESS(
                f"\nSuccessfully processed {len(ward_settlement_data)} ward settlement records "
                f"({created_count} new, {updated_count} updated)\n"
                f"Total records in database: {total_records}\n"
                f"Total settlements covered: {total_settlements} settlements across {len(ward_settlement_data)} wards"
            )
        )

        # Show breakdown by ward
        self.stdout.write("\nWard-wise settlement breakdown:")
        for ward_settlement in WardSettlement.objects.all().order_by("ward_number"):
            settlement_count = (
                len(ward_settlement.settlement_areas)
                if ward_settlement.settlement_areas
                else 0
            )
            self.stdout.write(
                f"  ‡§µ‡§°‡§æ {ward_settlement.ward_number}: {settlement_count} ‡§¨‡§∏‡•ç‡§§‡•Ä‡§π‡§∞‡•Å"
            )

        self.stdout.write(
            self.style.SUCCESS(
                f"\nüèòÔ∏è  Ward Settlement data creation completed successfully!"
            )
        )
